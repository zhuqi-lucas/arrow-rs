searchState.loadedDescShard("arrow_integration_test", 0, "Support for the Apache Arrow JSON test data format\nA struct that represents an Arrow file with a schema and …\nA struct that partially reads the Arrow JSON record batch\nA struct that partially reads the Arrow JSON column/array\nA struct that partially reads the Arrow JSON dictionary …\nFields are left as JSON <code>Value</code> as they vary by <code>DataType</code>\nRepresents a dictionary-encoded field in the Arrow JSON …\nA struct that partially reads the Arrow JSON schema.\nType of an index for a dictionary-encoded field in the …\nConstruct an Arrow array from a partially typed JSON column\nThe <code>RecordBatch</code>es in the JSON file\nThe bit width of the dictionary index type\nThe children fields\nThe children columns for nested types\nThe columns in the record batch\nThe number of elements in the column\nA helper to create a null buffer from a <code>Vec&lt;bool&gt;</code>\nThe data for the dictionary\nThe data values in the column\nParse a data type from a JSON representation.\nGenerate a JSON representation of the data type.\nThe dictionaries in the JSON file\nThe dictionary for the field\nConstruct a <code>DictionaryArray</code> from a partially typed JSON …\nCompare the Arrow JSON field with the Arrow <code>Field</code>\nCompare the Arrow JSON with a record batch reader\nCompare the Arrow JSON schema with the Arrow <code>Schema</code>\nParse a <code>Field</code> definition from a JSON representation.\nGenerate a JSON representation of the <code>Field</code>.\nThe data type of the field, can be any valid JSON value\nAn array of JSON fields\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>RecordBatch</code> to an <code>ArrowJsonBatch</code>\nConvert the stored dictionaries to <code>Vec[RecordBatch]</code>\nA unique identifier for the dictionary\nThe unique identifier for the dictionary\nThe type of the dictionary index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the dictionary is ordered\nWhether the dictionary index type is signed\nAn array of metadata key-value pairs\nThe metadata for the field, if any\nThe name of the field\nThe name of the dictionary index type\nWhether the field is nullable\nThe offsets for variable-sized data types\nGenerates a <code>RecordBatch</code> from an Arrow JSON batch, given a …\nThe Arrow schema for JSON file\nParse a <code>Schema</code> definition from a JSON representation.\nGenerate a JSON representation of the <code>Schema</code>.\nConvert to an Arrow Field TODO: convert to use an Into\nThe type id for union types\nThe validity bitmap to determine null values\nParse a data type from a JSON representation.\nGenerate a JSON representation of the data type.\nParse a <code>Field</code> definition from a JSON representation.\nGenerate a JSON representation of the <code>Field</code>.\nReturns the argument unchanged.\nParse a <code>metadata</code> definition from a JSON representation. …\nCalls <code>U::from(self)</code>.\nParse a <code>Schema</code> definition from a JSON representation.\nGenerate a JSON representation of the <code>Schema</code>.")