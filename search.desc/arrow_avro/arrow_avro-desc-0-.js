searchState.loadedDescShard("arrow_avro", 0, "Convert data to / from the Apache Arrow memory format and …\nExtension trait for AvroField to add Utf8View support\nData type conversions between Avro and Arrow types\nCompression codec implementations for Avro\nCore functionality for reading Avro data into Arrow arrays\nAvro schema parsing and representation\nReturns a new field with Utf8View support enabled for …\nAn Avro datatype mapped to the arrow data model\nA named <code>AvroDataType</code>\nBuilder for an <code>AvroField</code>\nRepresents a literal Avro value.\nRepresents Avro bytes type, maps to Arrow’s Binary data …\nRepresents a boolean value.\nRepresents Avro boolean type, maps to Arrow’s Boolean …\nRepresents a bytes value.\nPromotes <code>bytes</code> to a <code>string</code>.\nAn Avro encoding\nRepresents Avro date logical type, maps to Arrow’s …\nRepresents Avro decimal type, maps to Arrow’s Decimal128 …\nIndicates that a default value should be used for a field. …\nRepresents a double value.\nRepresents an enum symbol.\nRepresents an Avro enum, maps to Arrow’s …\nHolds the mapping information for resolving Avro enums.\nProvides mapping information for resolving enums. …\nRepresents Avro fixed type, maps to Arrow’s …\nRepresents a float value.\nRepresents Avro float type, maps to Arrow’s Float32 data …\nRepresents Avro double type, maps to Arrow’s Float64 …\nPromotes a <code>float</code> to a <code>double</code>.\nRepresents an integer value.\nRepresents Avro int type, maps to Arrow’s Int32 data type\nRepresents Avro long type, maps to Arrow’s Int64 data …\nPromotes an <code>int</code> to a <code>double</code>.\nPromotes an <code>int</code> to a <code>float</code>.\nPromotes an <code>int</code> to a <code>long</code>.\nRepresents Avro duration logical type, maps to Arrow’s …\nRepresents Avro array type, maps to Arrow’s List data …\nRepresents a long value.\nPromotes a <code>long</code> to a <code>double</code>.\nPromotes a <code>long</code> to a <code>float</code>.\nResolves Avro type names to <code>AvroDataType</code>\nRepresents Avro map type, maps to Arrow’s Map data type\nRepresents a null value.\nRepresents Avro null type, maps to Arrow’s Null data type\nThe nulls are encoded as the first union variant\nThe nulls are encoded as the second union variant\nAvro types are not nullable, with nullability instead …\nDefines the type of promotion to be applied during schema …\nIndicates that the writer’s type should be promoted to …\nProvides resolution information for record fields. …\nContains information about how to resolve differences …\nContains the necessary information to resolve a writer’s …\nResolves Avro type names to <code>AvroDataType</code>\nRepresents a string value.\nPromotes a <code>string</code> to <code>bytes</code>.\nRepresents Avro record type, maps to Arrow’s Struct data …\nRepresents Avro time-micros logical type, maps to Arrow’…\nRepresents Avro time-millis logical type, maps to Arrow’…\nRepresents Avro timestamp-micros or local-timestamp-micros …\nRepresents Avro timestamp-millis or local-timestamp-millis …\nRepresents an unsupported literal type.\nString data represented as UTF-8 encoded bytes, …\nString data represented as UTF-8 encoded bytes with an …\nRepresents Avro Uuid type, a FixedSizeBinary with a length …\nBuild an <code>AvroField</code> from the builder\nReturns a reference to the codec used by this data type\nReturns the <code>AvroDataType</code>\nA list of indices in the reader’s schema for fields that …\nThe index to use for a writer’s symbol that is not …\nReturns the arrow <code>Field</code>\nReturns an arrow <code>Field</code> with the given name\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA mapping from the writer’s symbol index to the reader’…\nReturns the name of this Avro field\nCreate a new <code>AvroDataType</code> with the given parts.\nCreates a new <code>AvroFieldBuilder</code> for a given writer schema.\nReturns the nullability status of this data type\nParses a <code>AvroDataType</code> from the provided <code>Schema</code> and the …\nPerforms schema resolution between a writer and reader …\nFor fields present in the writer’s schema but not the …\nSets the reader schema for schema resolution.\nEnable or disable strict mode.\nReturns a new <code>AvroField</code> with Utf8View support enabled\nEnable or disable Utf8View support\nConverts a string codec to use Utf8View if requested\nMaps a writer’s field index to the corresponding reader…\nBzip2 compression\nThe metadata key used for storing the JSON encoded …\nSupported compression codecs for Avro data\nDeflate compression (RFC 1951)\nSnappy compression\nXz compression\nZStandard compression\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA low-level interface for decoding Avro-encoded bytes into …\nA high-level Avro <code>Reader</code> that reads container-file blocks …\nA builder to create an <code>Avro Reader</code> that reads Avro data …\nReturn the Avro container-file header\nReturns true if the decoder has not decoded any batches …\nReturns true if the decoder has reached its capacity for …\nReturn the configured maximum number of rows per batch\nDecoder for <code>Block</code>\nCreate a <code>Reader</code> from this builder and a <code>BufRead</code>\nCreate a <code>Decoder</code> from this builder.\nReturns the number of rows that can be added to this …\nFeed <code>data</code> into the decoder row by row until we either:\nProduce a <code>RecordBatch</code> if at least one row is fully …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecoder for <code>Header</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ReaderBuilder</code> with default settings:\nReads the next <code>RecordBatch</code> from the Avro file or <code>Ok(None)</code> …\nRead the Avro file header (magic, metadata, sync marker) …\nReturn the Arrow schema for the rows decoded by this …\nReturn the Arrow schema discovered from the Avro file …\nGet whether StringViewArray is enabled for string data\nSets the initial schema fingerprint for decoding …\nSets the row-based batch size\nSets the Avro reader schema.\nControls whether certain Avro unions of the form …\nSet whether to use StringViewArray for string data\nSets the <code>SchemaStore</code> used for resolving writer schemas.\nA file data block\nA decoder for <code>Block</code>\nThe number of objects in this block\nThe serialized objects within this block\nParse <code>Block</code> from <code>buf</code>, returning the number of bytes read\nFlush this decoder returning the parsed <code>Block</code> if any\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe sync marker\nA wrapper around a byte slice, providing low-level …\nReturns the argument unchanged.\nRead exactly <code>n</code> bytes from the buffer (e.g. for Avro <code>fixed</code>).\nRead a single <code>u8</code>\nCalls <code>U::from(self)</code>.\nReturns the current cursor position\nDecoding a block count\nDecoding a block byte length\nFinished decoding\nA decoded header for an Object Container File\nA decoder for <code>Header</code>\nDecoding a key string\nDecoding a key length\nDecoding the <code>MAGIC</code> prefix\nDecoding sync marker\nDecoding a value payload\nDecoding a value length\nThe number of bytes remaining in the current string/bytes …\nReturns the <code>CompressionCodec</code> if any\nParse <code>Header</code> from <code>buf</code>, returning the number of bytes read\nFlush this decoder returning the parsed <code>Header</code> if any\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value for a given metadata key if present\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe raw binary data of the metadata map\nThe end offsets of strings in <code>meta_buf</code>\nReturns an iterator over the meta keys in this header\nReturns the <code>Schema</code> if any\nReturns the sync token for this file\nThe decoded sync marker\nThe number of remaining tuples in the current block\nDecodes avro encoded data into <code>RecordBatch</code>\nString data encoded as UTF-8 bytes, mapped to Arrow’s …\nString data encoded as UTF-8 bytes, but mapped to Arrow’…\nAppend a null record\nBuilds the <code>RecordDecoder</code>.\nDecode <code>count</code> records from <code>buf</code>\nDecode a single record from <code>buf</code>\nFlush the decoded records into a <code>RecordBatch</code>\nFlush decoded records to an <code>ArrayRef</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>RecordDecoderBuilder</code> for configuring a …\nReturns the decoder’s <code>SchemaRef</code>\nSign extends a byte slice to a fixed-size array of N bytes.\nCreate a new <code>RecordDecoder</code> from the provided <code>AvroDataType</code> …\nCreates a new <code>RecordDecoder</code> from the provided <code>AvroDataType</code> …\nDecoder for zig-zag encoded variable length (VLW) integers\nReturns the argument unchanged.\nScratch space for decoding VLQ integers\nCalls <code>U::from(self)</code>.\nDecode a signed long from <code>buf</code>\nRead a varint from <code>buf</code> returning the decoded <code>u64</code> and the …\nBased on\nMetadata key used to store the documentation for a type in …\nMetadata key used to represent Avro enum symbols in an …\nMetadata key used to store the default value of a field in …\nMetadata key used to store the name of a type in an Avro …\nMetadata key used to store the name of a type in an Avro …\nAn array\nArray type: a sequence of values of the same type\nAdditional attributes within a <code>Schema</code>\nA wrapper for an Avro schema in its JSON string …\nboolean: a binary value\nbytes: sequence of 8-bit unsigned bytes\nA complex type such as record, array, map, etc.\nA complex type\ndouble: double precision (64-bit) IEEE 754 floating-point …\n64‑bit Rabin fingerprint as described in the Avro spec.\nAn enumeration\nEnum type: a set of named values\nThe pre‑computed table.\nA field within a <code>Record</code>\nA schema fingerprint in one of the supported formats.\nSupported fingerprint algorithms for Avro schema …\nA fixed length binary array\nFixed type: a fixed-size byte array\nfloat: single precision (32-bit) IEEE 754 floating-point …\nint: 32-bit signed integer\nlong: 64-bit signed integer\nA map\nMap type: a mapping from strings to values of the same type\nnull: no value\nA primitive type like null, boolean, int, etc.\nA primitive type\n64‑bit CRC‑64‑AVRO Rabin fingerprint.\nA 64-bit Rabin fingerprint.\nA record\nRecord type: a sequence of fields with names and types\nA reference to another named type\nThe metadata key used for storing the JSON encoded <code>Schema</code>\nThe Avro single‑object encoding “magic” bytes (…\nAn Avro schema\nAn in-memory cache of Avro schemas, indexed by their …\nstring: Unicode character sequence\nA type definition that is not a variant of <code>ComplexType</code>\nA type with attributes\nEither a <code>PrimitiveType</code> or a reference to a previously …\nA direct type name (primitive or reference)\nA union of multiple schemas (e.g., [“null”, “string…\nAdditional JSON attributes\nAlternative names for this record\nAlternative names for this enum\nAlternative names for this fixed type\nAdditional attributes associated with this type\nAdditional attributes for this record\nAdditional attributes for this enum\nAdditional attributes for this array\nAdditional attributes for this map\nAdditional attributes for this fixed type\nBuild the full 256‑entry table at compile time.\nCompare two Avro schemas for equality (identical schemas). …\nComputes the 64-bit Rabin fingerprint for a given …\nOptional default value for this field\nOptional default value for this enum\nOptional documentation string for the record\nOptional documentation for this field\nOptional documentation string describing the enum\nReturns the field metadata for this <code>Attributes</code>\nThe fields contained in this record\nReturns the Rabin fingerprint of the schema.\nReturns the <code>FingerprintAlgorithm</code> used by the <code>SchemaStore</code> …\nThe hashing algorithm used for generating fingerprints.\nReturns a <code>Vec</code> containing <strong>all unique <code>Fingerprint</code>s</strong> currently …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates the Parsed Canonical Form for the given <code>Schema</code>.\nGenerates a fingerprint for the given <code>Schema</code> using the …\nGenerates the 64-bit Rabin fingerprint for the given <code>Schema</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe schema for items in this array\nThe Avro schema as a JSON string.\nA logical type name\nLooks up a schema by its <code>Fingerprint</code>.\nName of the record\nName of the field within the record\nName of the enum\nName of the fixed type\nOptional namespace for the record, provides a way to …\nOptional namespace for the enum, provides organizational …\nOptional namespace for the fixed type\nCreates a new <code>AvroSchema</code> from a JSON string.\nCreates an empty <code>SchemaStore</code> using the default …\nBuild one entry of the polynomial‑division table.\nRegisters a schema with the store and returns its …\nDeserializes and returns the <code>AvroSchema</code>.\nA map from a schema’s fingerprint to the schema itself.\nThe number of bytes in this fixed type\nThe symbols (values) that this enum can have\nCreates a <code>SchemaStore</code> from a slice of schemas. Each schema …\nThe type of this Avro data structure\nThe field’s type definition\nThe schema for values in this map")