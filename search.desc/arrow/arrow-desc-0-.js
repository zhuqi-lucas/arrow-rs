searchState.loadedDescShard("arrow", 0, "A complete, safe, native Rust implementation of Apache …\nArrow crate version\nDefines the low-level <code>Allocation</code> API for shared memory …\nStatically typed implementations of Arrow Arrays\nTypes of shared memory region\nComputation kernels on Arrow Arrays\nDefines the logical data types of Arrow arrays.\nDowncast an <code>Array</code> to a <code>DictionaryArray</code> based on its …\nDowncast an <code>Array</code> to a <code>PrimitiveArray</code> based on its <code>DataType</code>\nDefines <code>ArrowError</code> for representing failures in various …\nContains declarations to bind to the C Data Interface.\nContains declarations to bind to the C Stream Interface.\nContains the <code>RecordBatch</code> type and associated traits\nConversion methods for dates and times.\nArrow Tensor Type, defined in <code>format/Tensor.fbs</code>.\nUtility functions for working with Arrow data\nCache and allocation multiple alignment size\nThe owner of an allocation. The trait implementation is …\nBuffer is always null. Unused currently in Rust …\nA <code>DictionaryArray</code> with the key type erased\nAn array in the arrow columnar format\nDon’t preallocate inner buffers and rely on array growth …\nA generic trait for accessing the values of an <code>Array</code>\nTrait for dealing with different array builders at runtime\nA generic representation of Arrow array data which …\nBuilder for <code>ArrayData</code> type\nA thread-safe, shared reference to the Arrow array data.\nAn iterator that returns Some(T) or None, that can be used …\nA reference-counted reference to a generic <code>Array</code>\nTrait for <code>ArrowNativeType</code> that adds checked and unchecked …\nA subtype of primitive type that represents numeric values.\nTrait for primitive values.\nAn extension trait for <code>dyn Array</code> that provides ergonomic …\nBinary, Utf8 and LargeUtf8 data types\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i32</code> offsets\nA trait for Arrow String Arrays, currently three types are …\nBuilder for <code>BinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>BinaryArray</code>\nBuilder for <code>RunArray</code> of <code>BinaryArray</code>\nA <code>GenericByteViewArray</code> of <code>[u8]</code>\nArray builder for <code>BinaryViewArray</code>\nBuffer holds a bitmap.\nAn array of boolean values\nBuilder for <code>BooleanBuffer</code>\nBuilder for <code>BooleanArray</code>\nan iterator that returns Some(T) or None, that can be used …\nBuilder for creating a Buffer object.\nLayout specification for a single data type buffer\nHelper to access views of <code>GenericByteViewArray</code> (…\nDefine capacities to pre-allocate for child data or data …\nData type of the array.\nthe corresponding Arrow data type of this primitive type.\nThe data type constructor of list array. The input is the …\nThe data type constructor of listview array. The input is …\nLayout specification for a data type\nA <code>PrimitiveArray</code> of days since UNIX epoch stored as <code>i32</code>\nBuffer builder for 32-bit date type.\nA 32-bit date array builder.\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nBuffer builder for 64-bit date type.\nA 64-bit date array builder.\nA possibly <code>Scalar</code> <code>Array</code>\nA <code>PrimitiveArray</code> of 128-bit fixed point decimals\nBuffer builder for 128-bit decimal type.\nA decimal 128 array builder\nA <code>PrimitiveArray</code> of 256-bit fixed point decimals\nBuffer builder for 256-bit decimal type.\nA decimal 256 array builder\nA <code>PrimitiveArray</code> of 32-bit fixed point decimals\nBuffer builder for 32-bit decimal type.\nA decimal 32 array builder\nA <code>PrimitiveArray</code> of 64-bit fixed point decimals\nBuffer builder for 64-bit decimal type.\nA decimal 64 array builder\nDictionary type\nAn array of dictionary encoded values\nA <code>PrimitiveArray</code> of elapsed durations in microseconds\nBuffer builder for elaspsed time of microseconds unit.\nAn elapsed time in microseconds array builder.\nA <code>PrimitiveArray</code> of elapsed durations in milliseconds\nBuffer builder for elaspsed time of milliseconds unit.\nAn elapsed time in milliseconds array builder.\nA <code>PrimitiveArray</code> of elapsed durations in nanoseconds\nBuffer builder for elaspsed time of nanoseconds unit.\nAn elapsed time in nanoseconds array builder.\nA <code>PrimitiveArray</code> of elapsed durations in seconds\nBuffer builder for elaspsed time of second unit.\nAn elapsed time in seconds array builder.\nCompare the values at two arbitrary indices in two arrays.\nAn array of fixed size binary arrays\nBuilder for <code>FixedSizeBinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>FixedSizeBinaryArray</code>\nan iterator that returns Some(T) or None, that can be used …\nAn array of [fixed length lists], similar to JSON arrays …\nBuilder for <code>FixedSizeListArray</code>\nan iterator that returns Some(T) or None, that can be used …\nEach element is a fixed width primitive, with the given …\nA <code>PrimitiveArray</code> of <code>f16</code>\nBuffer builder for 16-bit floating point type.\nA 16-bit floating point array builder.\nA <code>PrimitiveArray</code> of <code>f32</code>\nBuffer builder for 32-bit floating point type.\nA 32-bit floating point array builder.\nA <code>PrimitiveArray</code> of <code>f64</code>\nBuffer builder for 64-bit floating point type.\nA 64-bit floating point array builder.\nA <code>GenericByteArray</code> for storing <code>[u8]</code>\nArray builder for <code>GenericBinaryArray</code>\nan iterator that returns Some(T) or None, that can be used …\nAn array of variable length byte arrays\nBuilder for <code>GenericByteArray</code>\nBuilder for <code>DictionaryArray</code> of <code>GenericByteArray</code>\nBuilder for <code>RunArray</code> of <code>GenericByteArray</code>\nVariable-size Binary View Layout: An array of variable …\nA builder for <code>GenericByteViewArray</code>\nAn array of variable length lists, similar to JSON arrays …\nan iterator that returns Some(T) or None, that can be used …\nBuilder for <code>GenericListArray</code>\nAn array of variable length lists, specifically in the …\nan iterator that returns Some(T) or None, that can be used …\nBuilder for <code>GenericListViewArray</code>\nA <code>GenericByteArray</code> for storing <code>str</code>\nArray builder for <code>GenericStringArray</code>\nan iterator that returns Some(T) or None, that can be used …\nTrue for 64 bit offset size and false for 32 bit offset …\nA <code>PrimitiveArray</code> of <code>i16</code>\nBuffer builder for signed 16-bit integer type.\nA signed 16-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>i16</code>\nA <code>RunArray</code> with <code>i16</code> run ends\nA <code>PrimitiveArray</code> of <code>i32</code>\nBuffer builder for signed 32-bit integer type.\nA signed 32-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>i32</code>\nA <code>RunArray</code> with <code>i32</code> run ends\nA <code>PrimitiveArray</code> of <code>i64</code>\nBuffer builder for signed 64-bit integer type.\nA signed 64-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>i64</code>\nA <code>RunArray</code> with <code>i64</code> run ends\nA <code>PrimitiveArray</code> of <code>i8</code>\nBuffer builder for signed 8-bit integer type.\nA signed 8-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>i8</code>\nA <code>PrimitiveArray</code> of “calendar” intervals in days and …\nBuffer builder for “calendar” interval in days and …\nA “calendar” interval in days and milliseconds array …\nA <code>PrimitiveArray</code> of “calendar” intervals in  months, …\nBuffer builder “calendar” interval in months, days, …\nA “calendar” interval in months, days, and nanoseconds …\nA <code>PrimitiveArray</code> of “calendar” intervals in whole …\nBuffer builder for “calendar” interval in months.\nA “calendar” interval in months array builder.\nThe Arrow type of the element being accessed.\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i64</code> offsets\nBuilder for <code>LargeBinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>RunArray</code> of <code>LargeBinaryArray</code>\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nBuilder for <code>LargeListArray</code>\nA <code>GenericListViewArray</code> of variable size lists, storing …\nBuilder for <code>LargeListViewArray</code>\nA <code>GenericStringArray</code> of <code>str</code> using <code>i64</code> offsets\nBuilder for <code>LargeStringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeStringArray</code>\nBuilder for <code>RunArray</code> of <code>LargeStringArray</code>\nList and LargeList data types\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nBuilder for <code>ListArray</code>\nA <code>GenericListViewArray</code> of variable size lists, storing …\nBuilder for <code>ListViewArray</code>\nThe max <code>usize</code> offset\nThe maximum value and identity for the <code>min</code> aggregation. …\nThe minimum value and identity for the <code>max</code> aggregation. …\nAn array of key-value maps\nan iterator that returns Some(T) or None, that can be used …\nBuilder for <code>MapArray</code>\nThe <code>Field</code> names for a <code>MapArray</code>\nEfficiently create an ArrayData from one or more existing …\nCorresponding Rust native type for the primitive type.\nAn optional primitive value\nAn array of null values\nBuilder for creating <code>NullBuffer</code>\nBuilder for <code>NullArray</code>\nThe multiplicative identity\nBuilder of <code>OffsetBuffer</code>\nA type that can be used within a variable-size array to …\nPrefix for the offset size\nAn array of primitive values, of type <code>ArrowPrimitiveType</code>\nBuilder for <code>PrimitiveArray</code>\nBuilder for <code>DictionaryArray</code> of <code>PrimitiveArray</code>\nan iterator that returns Some(T) or None, that can be used …\nBuilder for <code>RunArray</code> of <code>PrimitiveArray</code>\nA two-dimensional batch of column-oriented data with a …\nGeneric implementation of RecordBatchReader that wraps an …\nOptions that control the behaviour used when creating a …\nTrait for types that can read <code>RecordBatch</code>’s.\nTrait for types that can write <code>RecordBatch</code>’s.\nAn array of run-end encoded values\nA wrapper around a single value <code>Array</code> that implements <code>Datum</code>…\nA <code>GenericStringArray</code> of <code>str</code> using <code>i32</code> offsets\nA trait for Arrow String Arrays, currently three types are …\nBuilder for <code>StringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>StringArray</code>\nBuilder for <code>RunArray</code> of <code>StringArray</code>\nA <code>GenericByteViewArray</code> that stores utf8 data\nArray builder for <code>StringViewArray</code>\nStruct type\nAn array of structs\nBuilder for <code>StructArray</code>\nA <code>PrimitiveArray</code> of milliseconds since midnight stored as …\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in milliseconds array builder.\nA <code>PrimitiveArray</code> of seconds since midnight stored as <code>i32</code>\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in seconds array builder.\nA <code>PrimitiveArray</code> of microseconds since midnight stored as …\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in microseconds array builder.\nA <code>PrimitiveArray</code> of nanoseconds since midnight stored as …\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in nanoseconds array builder.\nA <code>PrimitiveArray</code> of microseconds since UNIX epoch stored …\nBuffer builder for timestamp type of microsecond unit.\nA timestamp microsecond array builder.\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nBuffer builder for timestamp type of millisecond unit.\nA timestamp millisecond array builder.\nA <code>PrimitiveArray</code> of nanoseconds since UNIX epoch stored as …\nBuffer builder for timestamp type of nanosecond unit.\nA timestamp nanosecond array builder.\nA <code>PrimitiveArray</code> of seconds since UNIX epoch stored as <code>i64</code>\nBuffer builder for timestamp type of second unit.\nA timestamp second array builder.\nA <code>DictionaryArray</code> typed on its child values array\nA <code>RunArray</code> typed typed on its child values array\nA <code>PrimitiveArray</code> of <code>u16</code>\nBuffer builder for usigned 16-bit integer type.\nAn usigned 16-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u16</code>\nA <code>PrimitiveArray</code> of <code>u32</code>\nBuffer builder for usigned 32-bit integer type.\nAn usigned 32-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u32</code>\nA <code>PrimitiveArray</code> of <code>u64</code>\nBuffer builder for usigned 64-bit integer type.\nAn usigned 64-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u64</code>\nA <code>PrimitiveArray</code> of <code>u8</code>\nBuffer builder for usigned 8-bit integer type.\nAn usigned 8-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u8</code>\nAn array of values of varying types\nBuilder for <code>UnionArray</code>\nVariable width, such as string data for utf8 data\nThe additive identity\nAdds a single buffer to the ArrayData’s buffers\nAdds multiple buffers to the ArrayData’s buffers\nChecked addition operation\nAdds a single child data to the ArrayData’s child data\nWrapping addition operation\nAdvances the buffer by <code>additional</code> bits\nIncreases the number of elements in the internal buffer by …\nVerifies that the buffers meet the minimum alignment …\nEnsure that all buffers are aligned, copying data if …\nReturn the allocated size of this builder, in bytes, …\nReturn the allocated size of this builder in bytes, useful …\nAppends a boolean <code>v</code> into the buffer\nAppends a boolean value into the builder.\nAppends a value of type <code>T</code> into the builder, growing the …\nAppends an element (either null or non-null) to the …\nFinish the current fixed-length list array slot\nAppend a value to the array. Return an existing index if …\nFinish the current variable-length list array slot\nFinish the current map array slot\nAppend a primitive value to the array. Return an existing …\nAppend a value to the array. Return an existing index if …\nFinish the current variable-length list array slot\nAppends a value to this builder.\nAppends array values and null to this builder as is (this …\nAppends an array to the builder. This will flush any …\nAppends array values and null to this builder as is (this …\nAppends array values and null to this builder as is (this …\nAppend a new data block returning the new block offset\nAppend <code>BooleanBuffer</code> to this <code>BooleanBufferBuilder</code>\nAppend <code>NullBuffer</code> to this <code>NullBufferBuilder</code>\nAppends a null slot into the builder\nAppends <code>n</code> <code>null</code>s into the builder.\nAppends n <code>additional</code> bits of value <code>v</code> into the buffer\nAppends a value of type <code>T</code> into the builder N times, …\nAppends n <code>additional</code> bits of value <code>v</code> into the buffer\nAppend a value multiple times to the array. This is the …\nAppend a value multiple times to the array. This is the …\nAppends <code>n</code> <code>true</code>s into the builder to indicate that these <code>n</code> …\nAppends <code>n</code> <code>false</code>s into the builder to indicate that these <code>n</code> …\nAppends <code>n</code>, zero-initialized values\nAppends a <code>true</code> into the builder to indicate that this item …\nAppends a <code>false</code> into the builder to indicate that this …\nAppend a null value into the builder.\nAppends a null element to the struct.\nAppend a null value into the builder\nAppends a null slot into the builder\nAppend a null value to the array.\nAppends a null slot into the builder\nAppend a null to this <code>GenericListBuilder</code>\nAppends a null slot into the builder\nAppends a null slot into the builder\nAppends a null slot into the builder\nAppends null to the logical array encoded by the run-ends …\nAppends a null slot into the builder\nAppends null to the logical array encoded by the RunArray.\nAppend a null to this <code>GenericListViewBuilder</code>\nAppends a null to this builder, encoding the null in the …\nAppends <code>n</code> <code>null</code>s into the builder.\nAppends <code>n</code> <code>null</code>s into the builder.\nAppends <code>n</code> <code>null</code>s into the builder.\nAppends <code>n</code> <code>null</code>s into the builder.\nAppends <code>n</code> <code>null</code>s into the builder.\nAppends <code>n</code> <code>null</code>s into the builder.\nAppends <code>n</code> <code>null</code>s into the builder.\nAppends <code>n</code> no. of null’s into the builder\nAppend <code>n</code> null slots into the builder\nInfallibly append <code>n</code> null slots into the builder\nAppend an <code>Option</code> value into the builder.\nAppend an <code>Option</code> value into the builder\nAppends an <code>Option&lt;T&gt;</code> into the builder\nAppends an optional value into this <code>GenericListBuilder</code>\nAppends an <code>Option&lt;T&gt;</code> into the builder\nAppend an <code>Option</code> value into the builder\nAppends optional value to the logical array encoded by the …\nAppend an <code>Option</code> value into the builder\nAppends optional value to the logical array encoded by the …\nAppends an optional value into this <code>GenericListViewBuilder</code>\nAppend an <code>Option</code> value into the builder repeatedly <code>count</code> …\nAppend an <code>Option</code> value into the builder repeatedly <code>count</code> …\nAppend <code>range</code> bits from <code>to_set</code>\nAppends a slice of booleans into the buffer\nAppends a boolean slice into the builder to indicate the …\nAppends a slice of type <code>T</code>, growing the internal buffer as …\nAppends a slice of type <code>T</code> into the builder\nAppends a slice of type <code>T</code> into the builder\nSafety\nAppends values from a trusted length iterator.\nAppends a value into the builder.\nAppends a value into the builder\nAppends a value of type <code>T</code> into the builder\nAppends a byte slice into the builder.\nInfallibly append a value to this builder\nAppend a value to this <code>GenericListBuilder</code>\nAppends a value of type <code>T</code> into the builder\nInfallibly append a value to this builder\nAppends value to the logical array encoded by the run-ends …\nInfallibly append a value to this builder\nAppends value to the logical array encoded by the RunArray.\nAppend value into this <code>GenericListViewBuilder</code>\nAppends a value of type <code>T</code> into the builder <code>n</code> times\nAppends values from a slice of type <code>T</code> and a validity …\nAppends values from a slice of type <code>T</code> and a validity …\nInfallibly append a value to this builder repeatedly <code>count</code> …\nInfallibly append a value to this builder repeatedly <code>count</code> …\nAppend a view of the given <code>block</code>, <code>offset</code> and <code>length</code>\nThe concrete array definitions\nReturns the array as <code>Any</code> so that it can be downcasted to a …\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as an non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as an non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as an non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nDowncasts this to a <code>AnyDictionaryArray</code> panicking if not …\nDowncasts this to a <code>AnyDictionaryArray</code> panicking if not …\nDowncasts this to a <code>AnyDictionaryArray</code> returning <code>None</code> if …\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as an mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as an mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as an mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nDowncast this to a <code>GenericBinaryArray</code> panicking if not …\nDowncast this to a <code>GenericBinaryArray</code> panicking if not …\nDowncast this to a <code>GenericBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>BinaryViewArray</code> panicking if not …\nDowncast this to a <code>BinaryViewArray</code> panicking if not …\nDowncast this to a <code>BinaryViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>BinaryViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>BooleanArray</code> panicking if not possible\nDowncast this to a <code>BooleanArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>BooleanArray</code> returning <code>None</code> if not …\nDowncast this to a <code>GenericByteViewArray</code> panicking if not …\nDowncast this to a <code>GenericByteViewArray</code> panicking if not …\nDowncast this to a <code>GenericByteViewArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericByteArray</code> panicking if not …\nDowncast this to a <code>GenericByteArray</code> panicking if not …\nDowncast this to a <code>GenericByteArray</code> returning <code>None</code> if not …\nDowncast this to a <code>DictionaryArray</code> panicking if not …\nDowncast this to a <code>DictionaryArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>DictionaryArray</code> returning <code>None</code> if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> panicking if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> panicking if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>FixedSizeListArray</code> panicking if not …\nDowncast this to a <code>FixedSizeListArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>FixedSizeListArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> panicking if not …\nDowncast this to a <code>GenericListArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> returning <code>None</code> if not …\nDowncast this to a <code>GenericListViewArray</code> panicking if not …\nDowncast this to a <code>GenericListViewArray</code> panicking if not …\nDowncast this to a <code>GenericListViewArray</code> returning <code>None</code> if …\nDowncast this to a <code>MapArray</code> panicking if not possible\nDowncast this to a <code>MapArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to <code>MapArray</code>…\nDowncast this to a <code>MapArray</code> returning <code>None</code> if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>PrimitiveArray</code> panicking if not possible\nDowncast this to a <code>PrimitiveArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code>, to …\nDowncast this to a <code>PrimitiveArray</code> returning <code>None</code> if not …\nDowncast this to a <code>RunArray</code> panicking if not possible\nDowncast this to a <code>RunArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>RunArray</code> returning <code>None</code> if not possible\nReturns the packed bits\nReturns the inner bitmap builder as slice\nView the contents of this buffer as a slice\nReturns the packed bits\nReturn a mutable reference to the inner bitmap slice.\nView the contents of this buffer as a mutable slice\nDowncast this to a <code>GenericStringArray</code> panicking if not …\nDowncast this to a <code>GenericStringArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericStringArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericStringArray</code> returning <code>None</code> if …\nDowncast this to a <code>StringViewArray</code> panicking if not …\nDowncast this to a <code>StringViewArray</code> panicking if not …\nDowncast this to a <code>StringViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>StringViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>StructArray</code> panicking if not possible\nDowncast this to a <code>StructArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>StructArray</code> returning <code>None</code> if not …\nConvert <code>ByteView</code> to <code>u128</code> by concatenating the fields\nDowncast this to a <code>UnionArray</code> panicking if not possible\nDowncast this to a <code>UnionArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>UnionArray</code> returning <code>None</code> if not …\nReturns the <code>buffer</code> as a slice of type <code>T</code> starting at …\nThe buffer index.\nReturns the <code>Buffer</code> storing data for this <code>ArrayData</code>\nSets the buffers of the ArrayData\nA vector of buffer layout specifications, one for each …\nCreates an <code>ArrayData</code>, consuming <code>self</code>\nBuilds this builder creating a new <code>UnionArray</code>.\nCreates an array data, validating all inputs, and aligning …\nCreates an array data, without any validation\nDefines push-based APIs for constructing arrays\nReturns a builder to construct a <code>ArrayData</code> instance of the …\nReturns a new primitive array builder\nReturns a new boolean array builder\nReturns a new null array builder\nReturns an iterator over the bytes of this array, …\nCan contain a null bitmask\nReturns the capacity of the buffer, in bits (not bytes)\nReturns the actual capacity (number of elements) of the …\nReturns the capacity of this builder measured in slots of …\nReturns the capacity of this builder measured in slots of …\nDefines helper functions for downcasting <code>dyn Array</code> to …\nAccesses the child array for <code>type_id</code>.\nReturns a slice of children <code>ArrayData</code>. This will be non …\nSets the child data of the ArrayData\nWrite footer or termination data, then mark the writer as …\nReturns the field at <code>pos</code>.\nGet a reference to a column’s array by index.\nReturn child array whose field name equals to column_name\nGet a reference to a column’s array by name.\nReturn field names in this struct array\nReturns the fields of the struct array\nGet a reference to all columns in the record batch.\nCompare operation\nCompare two <code>GenericByteViewArray</code> at index <code>left_idx</code> and …\nCreates an array from a literal slice of values, suitable …\nReturns the buffers storing string data\nReturns a reference to the <code>DataType</code> of this array.\nReturns a reference to the <code>DataType</code> of this <code>ArrayData</code>\nCreates a new array data builder from an existing one, …\nReturns a default value of this primitive type.\nReturns a default value of this primitive type.\nReturns a default value of this primitive type.\nChecked division operation\nWrapping division operation\nDowncast this <code>RunArray</code> to a <code>TypedRunArray</code>\nDowncasts a <code>dyn Array</code> to a concrete type\nDowncast this dictionary to a <code>TypedDictionaryArray</code>\nDowncast an <code>Array</code> to a <code>DictionaryArray</code> based on its …\nGiven one or more expressions evaluating to an integer …\nGiven one or more expressions evaluating to an integer …\nGiven one or more expressions evaluating to primitive …\nDowncast an <code>Array</code> to a <code>PrimitiveArray</code> based on its <code>DataType</code>\nDowncast an <code>Array</code> to a <code>RunArray</code> based on its <code>DataType</code>, …\nGiven one or more expressions evaluating to an integer …\nGiven one or more expressions evaluating to primitive …\nDowncast an <code>Array</code> to a temporal <code>PrimitiveArray</code> based on …\nReturns a reference to the <code>StructArray</code> entries of this map\nReturns both the key and value array builders of the map\n<code>Field</code> name for map entries\nExports an array to raw pointers of the C Data Interface …\nExtends the in progress array with a region of the input …\nExtends builder with dictionary\nExtends builder with an existing dictionary array.\nExtends the in progress array with null elements, ignoring …\nReturns the number of non null, false values within this …\nContains declarations to bind to the C Data Interface.\nContains declarations to bind to the C Stream Interface.\nReturns a mutable reference to the child field builder at …\nReturns a reference to field builders\nReturns a mutable reference to field builders\nReturns the <code>Fields</code> of this <code>StructArray</code>\nBuilds the array\nCreates a <code>BooleanBuffer</code>\nBuilds the null buffer and resets the builder. Returns <code>None</code>…\nTakes the builder itself and returns an <code>OffsetBuffer</code>\nResets this builder and returns an immutable Buffer.\nBuilds the <code>GenericByteArray</code> and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array.\nBuilds the <code>StructArray</code> and reset this builder.\nBuilds the <code>GenericByteViewArray</code> and reset this builder\nBuilds the array and reset this builder.\nBuilds the BooleanArray and reset this builder.\nBuilds the <code>FixedSizeBinaryArray</code> and reset this builder.\nBuilds the array and reset this builder.\nBuilds the <code>FixedSizeListBuilder</code> and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the <code>DictionaryArray</code> and reset this builder.\nBuilds the array and reset this builder.\nBuilds the <code>GenericListArray</code> and reset this builder.\nBuilds the <code>MapArray</code>\nBuilds the NullArray and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the <code>PrimitiveArray</code> and reset this builder.\nBuilds the array and reset this builder.\nBuilds the <code>DictionaryArray</code> and reset this builder.\nCreates the RunArray and resets the builder. Panics if …\nBuilds the array and reset this builder.\nBuilds the <code>DictionaryArray</code> and reset this builder.\nBuilds the array and reset this builder.\nCreates the RunArray and resets the builder. Panics if …\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the <code>GenericListViewArray</code> and reset this builder.\nBuilds the array without resetting the underlying builder.\nBuilds the BooleanBuffer without resetting the builder.\nBuilds the NullBuffer without resetting the builder.\nBuilds the OffsetBuffer without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the <code>GenericByteArray</code> without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the <code>StructArray</code> without resetting the builder.\nBuilds the <code>GenericByteViewArray</code> without resetting the …\nBuilds the BooleanArray without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the <code>FixedSizeBinaryArray</code> without resetting the …\nBuilds the array without resetting the builder.\nBuilds the <code>FixedSizeListBuilder</code> without resetting the …\nBuilds the array without resetting the builder.\nBuilds the <code>DictionaryArray</code> without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the <code>GenericListArray</code> without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the <code>MapArray</code> without resetting the builder.\nBuilds the NullArray without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the <code>PrimitiveArray</code> without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the <code>DictionaryArray</code> without resetting the builder.\nBuilds the array without resetting the builder.\nCreates the RunArray and without resetting the builder. …\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the <code>DictionaryArray</code> without resetting the builder.\nCreates the RunArray and without resetting the builder. …\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the <code>GenericListViewArray</code> without resetting the …\nBuilds the <code>DictionaryArray</code> without resetting the values …\nBuilds the <code>DictionaryArray</code> without resetting the values …\nBuilds the <code>DictionaryArray</code> without resetting the values …\nCreates a ArrayData from the in progress array, consuming …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>BooleanArray</code> by evaluating the binary operation …\nCreates a new <code>StructBuilder</code> from <code>Fields</code> and <code>capacity</code>\nCreates a <code>GenericListArray</code> from an iterator of primitive …\nCreates a <code>FixedSizeListArray</code> from an iterator of primitive …\nCreates a <code>GenericByteArray</code> based on an iterator of values …\nCreates a PrimitiveArray based on an iterator of values …\nCreates a <code>GenericByteViewArray</code> based on an iterator of …\nCreates a PrimitiveArray based on an iterator of values …\nCreates a GenericBinaryArray from a vector of Optional …\nCreates a <code>PrimitiveArray</code> from an iterator of trusted …\nApplies a unary infallible function to each value in an …\nCreate a <code>BooleanArray</code> by evaluating the operation for each …\nCreates a PrimitiveArray based on a constant value with …\nCreates a GenericBinaryArray from a vector of byte slices\nReturns a “compacted” version of this array\nReturns the value for this <code>Datum</code> and a boolean indicating …\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory occupied …\nGets a bit in the buffer at <code>index</code>\nReturns the total number of bytes of memory pointed to by …\nReturns the total number of bytes of memory occupied by the\nReturns the physical index at which the array slice ends.\nReturns index to the physical array for the given index to …\nReturns the physical indices of the input logical indices. …\nReturns the total number of the bytes of memory occupied by\nReturns the physical index at which the array slice starts.\nReturns the value at the given index Useful if we want to …\nGet a reference to a column’s array by name.\nGet a reference to a column’s array by name.\nBuilds a 128-bit composite key for an inline value:\nReturns the first <code>len</code> bytes the inline value of the view.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns <code>GenericByteBuilder</code> of this byte array for mutating …\nConsume self and returns the in progress array as …\nConverts this <code>ArrayData</code> into an <code>ArrayDataBuilder</code>\nReturns a <code>PrimitiveBuilder</code> for this array, suitable for …\nReturns the underlying data of this array\nReturns the inner array\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nReturn the schema, columns and row count of this …\nReturns <code>PrimitiveDictionaryBuilder</code> of this dictionary …\nReturns true if all data within this string array is ASCII\nReturns true if all data within this array is ASCII\nReturns true if all data within this array is ASCII\nReturns if this <code>PrimitiveArray</code> is compatible with the …\nReturns whether this array is empty.\nWhether this dictionary is empty\nReturns true if len is 0\nReturns whether this <code>ArrayData</code> is empty\nReturns whether this array is empty.\nReturns true if empty\nCheck if the builder is empty.\nReturns whether the internal buffer is empty.\nReturns whether number of array slots is zero\nReturns whether number of array slots is zero\nReturns whether this array is empty.\nEquality operation\nGreater than equals operation\nGreater than equals operation\nGreater than operation\nGreater than operation\nLess than equals operation\nLess than equals operation\nLess than operation\nLess than operation\nNot equal operation\nNot equal operation\nReturns whether the element at index <code>i</code> is null\nReturns whether the element at <code>index</code> is null according to …\nReturns <code>false</code> if the array is guaranteed to not contain …\nCurrently exists for compatibility purposes with Arrow IPC.\nReturns whether the element at index <code>i</code> is not null\nGets a bit in the buffer at <code>index</code>\nReturns whether the element at <code>index</code> is <em>not</em> null, the …\nReturns true if zero else false\nConstructs a new iterator\nConstructs a new iterator\nconstructs a new iterator\nconstructs a new iterator\nconstructs a new iterator\nConstructs a new iterator for iterating over the values of …\nconstructs a new iterator\nconstructs a new iterator\nconstructs a new iterator\nconstructs a new iterator\nConstructs a new iterator\nIdiomatic iterators for <code>Array</code>\nReturn the value of <code>keys</code> (the dictionary key) at index <code>i</code>, …\n<code>Field</code> name for map key\nReturns the data type of the map’s keys.\nReturns the primitive keys of this dictionary as an <code>Array</code>\nReturn an array view of the keys of this dictionary as a …\nReturns the keys of this <code>TypedDictionaryArray</code>\nReturns a reference to the keys of this map\nReturns the key array builder of the map\nReturn an iterator over the keys (indexes into the …\nReturn the expected <code>DataTypeLayout</code> Arrays of this data …\nReturns the length (i.e., number of elements) of this …\nReturns the number of array slots in the builder\nThe length of the dictionary is the length of the keys …\nReturns the current length\nReturns the length (i.e., number of elements) of this …\nSets the length of the ArrayData\nReturns the length of this array.\nReturns the length of the buffer\nReturn the number of bits in the buffer.\nReturns the current number of array elements in the …\nReturns the number of binary slots in the builder\nReturns the number of array slots in the builder.\nReturns the length of this array.\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the length of logical array encoded by the …\nReturns the number of array slots in the builder\nReturns the length of logical array encoded by the …\nReturns the number of array slots in the builder\nThe length of the string/bytes.\nCalculates the logical length of the array encoded by the …\nReturns the total number of logical null values in this …\nReturns a potentially computed <code>NullBuffer</code> that represents …\nIf <code>value</code> is present in <code>values</code> (aka the dictionary), …\nConstructs an array using the input <code>data</code>. Returns a …\nReturns a builder with capacity for <code>capacity</code> elements of …\nReturns a comparison function that compares two values at …\nCreate a view based on the given data, block id and offset.\nMatch field names of structs and lists. If set to <code>true</code>, …\nChecked remainder operation\nWrapping remainder operation\nChecked multiplication operation\nWrapping multiplication operation\nCorresponding Rust native type if available\nChecked negation operation\nWrapping negation operation\nCreate a new <code>GenericByteArray</code> from the provided parts, …\nAttempt to create a new DictionaryArray with a specified …\nReturns a new MutableArrayData with capacity to <code>capacity</code> …\nCreate a new <code>GenericListArray</code> from the provided parts\nCreates a new array data builder\nConstruct a <code>ByteView</code> for data <code>length</code> of bytes with the …\nCreate a new <code>PrimitiveArray</code> from the provided values and …\nCreates a new <code>BooleanBufferBuilder</code> with sufficient space …\nCreates a new empty builder.\nCreate a new builder with space for <code>capacity + 1</code> offsets\nCreates a new builder with initial capacity for <em>at least</em> …\nCreate a new <code>GenericByteViewArray</code> from the provided parts, …\nCreate a new RecordBatchIterator.\nCreates a new <code>GenericByteBuilder</code>.\nCreates a new <code>StructBuilder</code>\nCreates a new <code>GenericByteViewBuilder</code>.\nCreate a new <code>BooleanArray</code> from the provided values and …\nCreate a new <code>FixedSizeBinaryArray</code> with <code>size</code> element size, …\nCreate a new <code>FixedSizeListArray</code> with <code>size</code> element size, …\nCreate a new <code>MapArray</code> from the provided parts\nCreate a new <code>NullArray</code> of the specified length\nCreate a new <code>StructArray</code> from the provided parts, …\nCreate a new <code>GenericListViewArray</code> from the provided parts\nCreates a new <code>RecordBatchOptions</code>\nCreate a new <code>Scalar</code> from an <code>Array</code>\nCreates a new boolean builder\nCreates a new <code>FixedSizeBinaryBuilder</code>\nCreates a new <code>FixedSizeListBuilder</code> from a given values …\nCreates a new <code>FixedSizeBinaryDictionaryBuilder</code>\nCreates a new <code>GenericListBuilder</code> from a given values array …\nCreates a new <code>MapBuilder</code>\nCreates a new null builder\nCreates a new primitive array builder\nCreates a new <code>PrimitiveDictionaryBuilder</code>.\nCreates a new <code>PrimitiveRunBuilder</code>\nCreates a new <code>GenericByteDictionaryBuilder</code>\nCreates a new <code>GenericByteRunBuilder</code>\nCreates a new <code>GenericListViewBuilder</code> from a given values …\ncreate a new iterator\nDescribes a basic numeric array where each element has a …\nCreates a new dense array builder.\nReturns a new empty ArrayData valid for <code>data_type</code>.\nDescribes arrays which have no data of their own (e.g. …\nCreates a new empty <code>RecordBatch</code>.\nCreates a new empty array\nCreate a new <code>StructArray</code> containing no fields\nDescribes a basic numeric array where each element has …\nCreates a new <code>BooleanBufferBuilder</code> from <code>MutableBuffer</code> of …\nCreates a new builder from a <code>MutableBuffer</code>.\nCreates a new builder from a <code>MutableBuffer</code>\nCreates a new  <code>GenericByteBuilder</code> from buffers.\nCreates a new primitive array builder from buffers\nCreates a new <code>PrimitiveDictionaryBuilder</code> from existing …\nCreates a new <code>PrimitiveDictionaryBuilder</code> from the provided …\nCreate a new <code>BooleanArray</code> from a <code>Buffer</code> specified by <code>offset</code>…\nCreates map array from provided keys, values and …\nCreate a new <code>BooleanArray</code> from <code>&amp;[u8]</code> This method uses …\nDescribes a list view type\nCreate a new <code>GenericByteArray</code> of length <code>len</code> where all …\nReturns a new <code>ArrayData</code> valid for <code>data_type</code> containing <code>len</code> …\nCreate a new <code>GenericListArray</code> of length <code>len</code> where all …\nCreate a new <code>PrimitiveArray</code> of the given length where all …\nCreate a new <code>GenericByteViewArray</code> of length <code>len</code> where all …\nCreate a new <code>BooleanArray</code> with length <code>len</code> consisting only …\nCreate a new <code>FixedSizeBinaryArray</code> of length <code>len</code> where all …\nCreate a new <code>FixedSizeListArray</code> of length <code>len</code> where all …\nCreate a new <code>StructArray</code> of length <code>len</code> where all values …\nCreate a new <code>GenericListViewArray</code> of length <code>len</code> where all …\nCreates a new array of <code>data_type</code> of length <code>length</code> filled …\nDescribes arrays which have no data of their own but may …\nCreate a new <code>Scalar</code> from <code>v</code>\nCreate a new <code>Scalar</code> from <code>value</code>\nCreate a new <code>Scalar</code> from <code>value</code>\nCreate a new <code>Scalar</code> from <code>value</code>\nCreate a new <code>Scalar</code> from <code>value</code>\nCreate a new <code>Scalar</code> from <code>value</code>\nCreates a new sparse array builder.\nCreate a new <code>GenericByteArray</code> from the provided parts, …\nCreate a new <code>DictionaryArray</code> without performing validation\nCreate a new ArrayData instance;\nCreate a new <code>GenericByteViewArray</code> from the provided parts, …\nCreate a new <code>StructArray</code> from the provided parts without …\nCreates a new <code>UnionArray</code>.\nCreates a <code>RecordBatch</code> from a schema and columns, without …\nCreate a new <code>StructArray</code> from the provided parts without …\nDescribes a view type\nCreates a new <code>GenericByteDictionaryBuilder</code> from a keys …\nCreates a new builder with given length.\nNormalize a semi-structured <code>RecordBatch</code> into a flat table.\nReturns the keys of this dictionary as usize\nSets the <code>null_bit_buffer</code> of the ArrayData\nReturns the current null count\nReturns the total number of nulls in this array\nSets the null count of the ArrayData\nReturns the total number of physical null values in this …\nValidates the Decimal Array, if the value of slot is …\nReturns the null buffer of this array if any.\nReturns a reference to the null buffer of this <code>ArrayData</code> …\nSets the null buffer of the ArrayData\nReturns the number of <code>Unicode Scalar Value</code> in the string …\nReturn the number of fields in this struct array\nReturns the number of columns in the record batch.\nReturns the number of fields for the struct this builder …\nReturns the number of rows in each column.\nComputes an occupancy mask for this dictionary’s values\nReturns the offset into the underlying data used by this …\nReturns the offset of this <code>ArrayData</code>\nSets the offset of the ArrayData\nThe offset into the buffer.\nReturns a reference to the offsets of this array\nReturns a reference to the offsets of this list\nReturns a reference to the offsets of this map\nReturns the <code>offsets</code> buffer if this is a dense array\nReturns a reference to the offsets of this list\nReturns the current offsets buffer as a slice\nReturns the current offsets buffer as a slice\nReturns the current offsets buffer as a slice\nChecked exponentiation operation\nWrapping exponentiation operation\nReturns the decimal precision of this array\nFirst 4 bytes of string/bytes data.\nReturns an iterator over the first <code>prefix_len</code> bytes of …\nProjects the schema onto the specified columns\nReturns true if this <code>ArrayData</code> is equal to <code>other</code>, using …\nPush a slice of <code>length</code> bytes\nCreates a record batch from literal slice of values, …\nReinterprets this array’s contents as a different data …\nRemove column by index and return it.\nReserve space to at least <code>additional</code> new bits. Capacity …\nReserve space for at least <code>additional</code> further offsets\nReserves memory for <em>at least</em> <code>n</code> more elements of type <code>T</code>.\nResizes the buffer, either truncating its contents (with …\nOptional row count, useful for specifying a row count for …\nReturns the run array of this <code>TypedRunArray</code>\nReturns a reference to <code>RunEndBuffer</code>\nReturns the run_ends of this <code>TypedRunArray</code>\nIdiomatic iterator for <code>RunArray</code>\nReturns the decimal scale of this array\nReturns the schema of this <code>RecordBatchReader</code>.\nReturns the <code>Schema</code> of the record batch.\nMutable access to the metadata of the schema.\nReturns a reference to the <code>Schema</code> of the record batch.\nSets a bit in the buffer at <code>index</code>\nShrinks the capacity of any exclusively owned buffer as …\nReturns a reference to the sizes of this list\nSkips validation of the data.\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nCreates a zero-copy slice of itself. This creates a new …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturn a new RecordBatch where each column is sliced …\nReturns the current values buffer and null buffer as a …\nChecked subtraction operation\nWrapping subtraction operation\nReturns an iterator over the last <code>suffix_len</code> bytes of each …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nConversion methods for dates and times.\nTimezone for timestamp arrays\nReturns the timezone of this array if any\nConvert the <code>StringViewArray</code> to <code>BinaryViewArray</code>\nReturns the underlying data of this array\nConvert the <code>BinaryViewArray</code> to <code>StringViewArray</code> If items …\nConvert the <code>BinaryViewArray</code> to <code>StringViewArray</code>\nReturns the total number of bytes used by all non inlined …\nReturns the number of non null, true values within this …\nTruncates the builder to the given length\nTruncates the builder to the given length\nShorten this BufferBuilder to <code>len</code> items\nTry to append a view of the given <code>block</code>, <code>offset</code> and <code>length</code>\nbuilds a StructArray from a vector of names and arrays.\nFallibly creates a <code>GenericStringArray</code> from a …\nCreate an array from an iterable argument of byte slices.\nCreate a <code>RecordBatch</code> from an iterable list of pairs of the …\nCreate a <code>RecordBatch</code> from an iterable list of tuples of the\nCreate an array from an iterable argument of sparse byte …\nCreate an array from an iterable argument of sparse byte …\nCreate a new <code>GenericByteArray</code> from the provided parts, …\nAttempt to create a new DictionaryArray with a specified …\nCreate a new ArrayData, validating that the provided …\nCreate a new <code>GenericListArray</code> from the provided parts\nCreate a new <code>PrimitiveArray</code> from the provided values and …\nAttempts to create RunArray using given run_ends (index …\nCreate a new <code>GenericByteViewArray</code> from the provided parts, …\nCreate a new <code>FixedSizeBinaryArray</code> from the provided parts, …\nCreate a new <code>FixedSizeListArray</code> from the provided parts, …\nCreate a new <code>MapArray</code> from the provided parts\nCreate a new <code>StructArray</code> from the provided parts, …\nAttempts to create a new <code>UnionArray</code>, validating the inputs …\nCreate a new <code>GenericListViewArray</code> from the provided parts\nCreates a <code>RecordBatch</code> from a schema and columns.\nCreates a new <code>FixedSizeBinaryDictionaryBuilder</code> from the …\nCreates a new <code>PrimitiveDictionaryBuilder</code> from the existing …\nCreates a new <code>GenericByteDictionaryBuilder</code> from the …\nCreate a new <code>StructArray</code> from the provided parts, …\nCreates a <code>RecordBatch</code> from a schema and columns, with …\nApplies a unary fallible function to all valid values in a …\nApplies a unary fallible function to all valid values in a …\nReturns the <code>type_id</code> for the array slot at <code>index</code>.\nReturns the <code>type_ids</code> buffer for this array\nReturns the names of the types in the union.\nZero-sized types used to parameterize generic array …\nApplies a unary infallible function to a primitive array, …\nApplies an unary and infallible function to a mutable …\nApplies a unary and infallible function to the array in …\nApplies a unary and nullable function to all valid values …\n“cheap” validation of an <code>ArrayData</code>. Ensures buffers are\nValidate that the data contained within this <code>ArrayData</code> is …\nValidates values in this array can be properly interpreted …\nPerforms a full recursive validation of this <code>ArrayData</code> and …\nValidates the values stored within this <code>ArrayData</code> are valid\nValidates the values stored within this <code>ArrayData</code> are valid\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a mutable slice\nReturns the current null buffer as a mutable slice\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>\nReturns ith value of this list array.\nReturns the primitive value at index <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the boolean value at index <code>i</code>.\nReturns the element at index <code>i</code> as a byte slice.\nReturns ith value of this list array.\nReturns ith value of this map array.\nReturns the array’s value at index <code>i</code>.\nReturns ith value of this list view array.\n<code>Field</code> name for map value\nReturns value as a chrono <code>NaiveDate</code> by using …\nReturns value as a chrono <code>NaiveDateTime</code>, handling time …\nReturns value as a chrono <code>NaiveDateTime</code>, handling time …\nReturns a value as a chrono <code>Duration</code>\nReturns <code>Self::value</code> formatted as a string\nReturns a value as a chrono <code>NaiveTime</code>\nReturns the raw value data\nReturns the raw value data.\nReturns the length for value at index <code>i</code>.\nReturns the length for value at index <code>i</code>.\nReturns the length for an element.\nReturns the length for an element.\nReturns the length for value at index <code>i</code>.\nReturns the length of the list\nReturns the offset for the element at index <code>i</code>.\nReturns the offset for value at index <code>i</code>.\nReturns the offset into the underlying values array for …\nReturns the offset for value at index <code>i</code>.\nReturns the offset values in the offsets buffer\nReturns the offset values in the offsets buffer.\nReturns the offset values in the offsets buffer\nReturns the offset values in the offsets buffer\nReturns the size for value at index <code>i</code>.\nReturns the sizes values in the offsets buffer\nReturns a clone of the value type of this list.\nReturns a clone of the value type of this list.\nReturns a clone of the value type of this list.\nReturns the data type of the map’s values.\nReturns a clone of the value type of this list.\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>\nReturns ith value of this list array.\nReturns the primitive value at index <code>i</code>.\nReturns the element at index <code>i</code> without bounds checking\nReturns the boolean value at index <code>i</code>.\nReturns the element at index <code>i</code> as a byte slice.\nReturns ith value of this map array.\nReturns ith value of this list view array.\nReturns the values of this dictionary\nReturns the values of this array\nReturns a reference to the dictionary values array\nReturns the values of this <code>TypedDictionaryArray</code>\nReturns a reference to the values of this list\nReturns the values of this array\nReturns a reference to values array\nReturns the values of this <code>TypedRunArray</code>\nReturns the underlying <code>BooleanBuffer</code> holding all the …\nReturns the values of this array.\nReturns a reference to the values of this list.\nReturns a reference to the values of this map\nReturns a reference to the values of this list\nReturns the child array builder as a mutable reference.\nReturns the child array builder as a mutable reference.\nReturns the value array builder of the map\nReturns the child array builder as a mutable reference.\nReturns the child array builder as an immutable reference\nReturns the child array builder as an immutable reference\nReturns the current values buffer as a slice\nReturns the current values buffer as a slice\nReturns the current values buffer as a slice\nReturns the current values buffer as a slice\nReturns the current dictionary values buffer as a slice\nReturns the current values buffer as a mutable slice\nReturns the current dictionary values buffer as a mutable …\nThis field only applies to the view type …\nReturns the views buffer\nSet the <code>Self::buffer_index</code> field\nSimilar to MutableArrayData::new, but lets users define the\nCreates a new <code>GenericByteBuilder</code>.\nCreates a new <code>GenericByteViewBuilder</code> with space for …\nCreates a new boolean builder with space for <code>capacity</code> …\nCreates a new <code>FixedSizeBinaryBuilder</code>, <code>capacity</code> is the …\nCreates a new <code>FixedSizeListBuilder</code> from a given values …\nCreates a new <code>FixedSizeBinaryDictionaryBuilder</code> with the …\nCreates a new <code>GenericListBuilder</code> from a given values array …\nCreates a new <code>MapBuilder</code> with capacity\nCreates a new primitive array builder with capacity no of …\nCreates a new <code>PrimitiveDictionaryBuilder</code> with the provided …\nCreates a new <code>PrimitiveRunBuilder</code> with the provided …\nCreates a new <code>GenericByteDictionaryBuilder</code> with the …\nCreates a new <code>GenericByteRunBuilder</code> with the provided …\nCreates a new <code>GenericListViewBuilder</code> from a given values …\nCreates a new dense array builder with capacity.\nCreates a new sparse array builder  with capacity.\nOverrides the <code>DataType</code> of this <code>PrimitiveArray</code>\nBy default <code>PrimitiveBuilder</code> uses …\nDeduplicate strings while building the array\nOverride the field passed to <code>FixedSizeListArray::new</code>\nOverride the field passed to <code>GenericListArray::new</code>\nBy default a nullable field is created with the name <code>item</code>\nSet a fixed buffer size for variable length strings\nOverride the field passed to <code>MapBuilder::new</code>\nSets the match_field_names of RecordBatchOptions and …\nSet the <code>Self::offset</code> field\nReturns a Decimal array with the same data as self, with …\nSets the precision and scale\nSets the row_count of RecordBatchOptions and returns self\nOverride the schema of this <code>RecordBatch</code>\nConstruct a timestamp array with new timezone\nSets the timezone\nConstruct a timestamp array with an optional timezone\nSets an optional timezone\nConstruct a timestamp array with UTC\nCreate a new <code>DictionaryArray</code> replacing <code>values</code> with the new …\nReturns a new dictionary with the same keys as the current …\nOverride the field passed to <code>MapBuilder::new</code>\nWrite a single batch to the writer.\nThe alignment required by Rust for an array of the …\nThe width of each element in bytes\nA <code>DictionaryArray</code> with the key type erased\nAn array in the arrow columnar format\nA generic trait for accessing the values of an <code>Array</code>\nA reference-counted reference to a generic <code>Array</code>\nTrait for primitive values.\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i32</code> offsets\nA trait for Arrow String Arrays, currently three types are …\nA <code>GenericByteViewArray</code> of <code>[u8]</code>\nAn array of boolean values\nthe corresponding Arrow data type of this primitive type.\nA <code>PrimitiveArray</code> of days since UNIX epoch stored as <code>i32</code>\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of 128-bit fixed point decimals\nA <code>PrimitiveArray</code> of 256-bit fixed point decimals\nA <code>PrimitiveArray</code> of 32-bit fixed point decimals\nA <code>PrimitiveArray</code> of 64-bit fixed point decimals\nAn array of dictionary encoded values\nA <code>PrimitiveArray</code> of elapsed durations in microseconds\nA <code>PrimitiveArray</code> of elapsed durations in milliseconds\nA <code>PrimitiveArray</code> of elapsed durations in nanoseconds\nA <code>PrimitiveArray</code> of elapsed durations in seconds\nAn array of fixed size binary arrays\nAn array of [fixed length lists], similar to JSON arrays …\nA <code>PrimitiveArray</code> of <code>f16</code>\nA <code>PrimitiveArray</code> of <code>f32</code>\nA <code>PrimitiveArray</code> of <code>f64</code>\nA <code>GenericByteArray</code> for storing <code>[u8]</code>\nAn array of variable length byte arrays\nVariable-size Binary View Layout: An array of variable …\nAn array of variable length lists, similar to JSON arrays …\nAn array of variable length lists, specifically in the …\nA <code>GenericByteArray</code> for storing <code>str</code>\nTrue for 64 bit offset size and false for 32 bit offset …\nA <code>PrimitiveArray</code> of <code>i16</code>\nA <code>DictionaryArray</code> indexed by <code>i16</code>\nA <code>RunArray</code> with <code>i16</code> run ends\nA <code>PrimitiveArray</code> of <code>i32</code>\nA <code>DictionaryArray</code> indexed by <code>i32</code>\nA <code>RunArray</code> with <code>i32</code> run ends\nA <code>PrimitiveArray</code> of <code>i64</code>\nA <code>DictionaryArray</code> indexed by <code>i64</code>\nA <code>RunArray</code> with <code>i64</code> run ends\nA <code>PrimitiveArray</code> of <code>i8</code>\nA <code>DictionaryArray</code> indexed by <code>i8</code>\nA <code>PrimitiveArray</code> of “calendar” intervals in days and …\nA <code>PrimitiveArray</code> of “calendar” intervals in  months, …\nA <code>PrimitiveArray</code> of “calendar” intervals in whole …\nThe Arrow type of the element being accessed.\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i64</code> offsets\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nA <code>GenericListViewArray</code> of variable size lists, storing …\nA <code>GenericStringArray</code> of <code>str</code> using <code>i64</code> offsets\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nA <code>GenericListViewArray</code> of variable size lists, storing …\nThe max <code>usize</code> offset\nAn array of key-value maps\nCorresponding Rust native type for the primitive type.\nAn optional primitive value\nAn array of null values\nA type that can be used within a variable-size array to …\nPrefix for the offset size\nAn array of primitive values, of type <code>ArrowPrimitiveType</code>\nAn array of run-end encoded values\nA <code>GenericStringArray</code> of <code>str</code> using <code>i32</code> offsets\nA trait for Arrow String Arrays, currently three types are …\nA <code>GenericByteViewArray</code> that stores utf8 data\nAn array of structs\nA <code>PrimitiveArray</code> of milliseconds since midnight stored as …\nA <code>PrimitiveArray</code> of seconds since midnight stored as <code>i32</code>\nA <code>PrimitiveArray</code> of microseconds since midnight stored as …\nA <code>PrimitiveArray</code> of nanoseconds since midnight stored as …\nA <code>PrimitiveArray</code> of microseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of nanoseconds since UNIX epoch stored as …\nA <code>PrimitiveArray</code> of seconds since UNIX epoch stored as <code>i64</code>\nA <code>DictionaryArray</code> typed on its child values array\nA <code>RunArray</code> typed typed on its child values array\nA <code>PrimitiveArray</code> of <code>u16</code>\nA <code>DictionaryArray</code> indexed by <code>u16</code>\nA <code>PrimitiveArray</code> of <code>u32</code>\nA <code>DictionaryArray</code> indexed by <code>u32</code>\nA <code>PrimitiveArray</code> of <code>u64</code>\nA <code>DictionaryArray</code> indexed by <code>u64</code>\nA <code>PrimitiveArray</code> of <code>u8</code>\nA <code>DictionaryArray</code> indexed by <code>u8</code>\nAn array of values of varying types\nReturns the array as <code>Any</code> so that it can be downcasted to a …\nReturns a reference to the <code>DataType</code> of this array.\nReturns a default value of this primitive type.\nReturns a default value of this primitive type.\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory pointed to by …\nReturns the underlying data of this array\nReturns true if all data within this string array is ASCII\nReturns whether this array is empty.\nReturns whether the element at <code>index</code> is null according to …\nReturns <code>false</code> if the array is guaranteed to not contain …\nReturns whether the element at <code>index</code> is <em>not</em> null, the …\nConstructs a new iterator\nConstructs a new iterator\nReturns the primitive keys of this dictionary as an <code>Array</code>\nReturns the length (i.e., number of elements) of this …\nReturns the total number of logical null values in this …\nReturns a potentially computed <code>NullBuffer</code> that represents …\nConstructs an array using the input <code>data</code>. Returns a …\nCorresponding Rust native type if available\nCreates a new empty array\nCreates a new array of <code>data_type</code> of length <code>length</code> filled …\nReturns the keys of this dictionary as usize\nReturns the total number of physical null values in this …\nReturns the null buffer of this array if any.\nReturns the offset into the underlying data used by this …\nShrinks the capacity of any exclusively owned buffer as …\nReturns a zero-copy slice of this array with the indicated …\nReturns the underlying data of this array\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>\nReturns the values of this dictionary\nCreate a new <code>DictionaryArray</code> replacing <code>values</code> with the new …\nTrait for dealing with different array builders at runtime\nBuilder for <code>BinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>BinaryArray</code>\nBuilder for <code>RunArray</code> of <code>BinaryArray</code>\nArray builder for <code>BinaryViewArray</code>\nBuilder for <code>BooleanBuffer</code>\nBuilder for <code>BooleanArray</code>\nBuilder for creating a Buffer object.\nBuffer builder for 32-bit date type.\nA 32-bit date array builder.\nBuffer builder for 64-bit date type.\nA 64-bit date array builder.\nBuffer builder for 128-bit decimal type.\nA decimal 128 array builder\nBuffer builder for 256-bit decimal type.\nA decimal 256 array builder\nBuffer builder for 32-bit decimal type.\nA decimal 32 array builder\nBuffer builder for 64-bit decimal type.\nA decimal 64 array builder\nBuffer builder for elaspsed time of microseconds unit.\nAn elapsed time in microseconds array builder.\nBuffer builder for elaspsed time of milliseconds unit.\nAn elapsed time in milliseconds array builder.\nBuffer builder for elaspsed time of nanoseconds unit.\nAn elapsed time in nanoseconds array builder.\nBuffer builder for elaspsed time of second unit.\nAn elapsed time in seconds array builder.\nBuilder for <code>FixedSizeBinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>FixedSizeBinaryArray</code>\nBuilder for <code>FixedSizeListArray</code>\nBuffer builder for 16-bit floating point type.\nA 16-bit floating point array builder.\nBuffer builder for 32-bit floating point type.\nA 32-bit floating point array builder.\nBuffer builder for 64-bit floating point type.\nA 64-bit floating point array builder.\nArray builder for <code>GenericBinaryArray</code>\nBuilder for <code>GenericByteArray</code>\nBuilder for <code>DictionaryArray</code> of <code>GenericByteArray</code>\nBuilder for <code>RunArray</code> of <code>GenericByteArray</code>\nA builder for <code>GenericByteViewArray</code>\nBuilder for <code>GenericListArray</code>\nBuilder for <code>GenericListViewArray</code>\nArray builder for <code>GenericStringArray</code>\nBuffer builder for signed 16-bit integer type.\nA signed 16-bit integer array builder.\nBuffer builder for signed 32-bit integer type.\nA signed 32-bit integer array builder.\nBuffer builder for signed 64-bit integer type.\nA signed 64-bit integer array builder.\nBuffer builder for signed 8-bit integer type.\nA signed 8-bit integer array builder.\nBuffer builder for “calendar” interval in days and …\nA “calendar” interval in days and milliseconds array …\nBuffer builder “calendar” interval in months, days, …\nA “calendar” interval in months, days, and nanoseconds …\nBuffer builder for “calendar” interval in months.\nA “calendar” interval in months array builder.\nBuilder for <code>LargeBinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>RunArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>LargeListArray</code>\nBuilder for <code>LargeListViewArray</code>\nBuilder for <code>LargeStringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeStringArray</code>\nBuilder for <code>RunArray</code> of <code>LargeStringArray</code>\nBuilder for <code>ListArray</code>\nBuilder for <code>ListViewArray</code>\nBuilder for <code>MapArray</code>\nThe <code>Field</code> names for a <code>MapArray</code>\nBuilder for creating <code>NullBuffer</code>\nBuilder for <code>NullArray</code>\nBuilder of <code>OffsetBuffer</code>\nBuilder for <code>PrimitiveArray</code>\nBuilder for <code>DictionaryArray</code> of <code>PrimitiveArray</code>\nBuilder for <code>RunArray</code> of <code>PrimitiveArray</code>\nBuilder for <code>StringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>StringArray</code>\nBuilder for <code>RunArray</code> of <code>StringArray</code>\nArray builder for <code>StringViewArray</code>\nBuilder for <code>StructArray</code>\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in milliseconds array builder.\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in seconds array builder.\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in microseconds array builder.\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in nanoseconds array builder.\nBuffer builder for timestamp type of microsecond unit.\nA timestamp microsecond array builder.\nBuffer builder for timestamp type of millisecond unit.\nA timestamp millisecond array builder.\nBuffer builder for timestamp type of nanosecond unit.\nA timestamp nanosecond array builder.\nBuffer builder for timestamp type of second unit.\nA timestamp second array builder.\nBuffer builder for usigned 16-bit integer type.\nAn usigned 16-bit integer array builder.\nBuffer builder for usigned 32-bit integer type.\nAn usigned 32-bit integer array builder.\nBuffer builder for usigned 64-bit integer type.\nAn usigned 64-bit integer array builder.\nBuffer builder for usigned 8-bit integer type.\nAn usigned 8-bit integer array builder.\nBuilder for <code>UnionArray</code>\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\n<code>Field</code> name for map entries\nBuilds the array\nBuilds the array without resetting the underlying builder.\nReturns the boxed builder as a box of <code>Any</code>.\n<code>Field</code> name for map key\nReturns the number of array slots in the builder\nReturns a builder with capacity for <code>capacity</code> elements of …\nCreate a view based on the given data, block id and offset.\n<code>Field</code> name for map value\nAn extension trait for <code>dyn Array</code> that provides ergonomic …\nDowncasts this to a <code>AnyDictionaryArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>BooleanArray</code> returning <code>None</code> if not …\nDowncast this to a <code>GenericByteViewArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericByteArray</code> returning <code>None</code> if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>DictionaryArray</code> returning <code>None</code> if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>FixedSizeListArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> returning <code>None</code> if not …\nDowncast this to a <code>GenericListViewArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to <code>MapArray</code>…\nDowncast this to a <code>MapArray</code> returning <code>None</code> if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code>, to …\nDowncast this to a <code>PrimitiveArray</code> returning <code>None</code> if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>RunArray</code> returning <code>None</code> if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>StructArray</code> returning <code>None</code> if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>UnionArray</code> returning <code>None</code> if not …\nDowncasts a <code>dyn Array</code> to a concrete type\nABI-compatible struct for ArrowArray from C Data Interface …\nABI-compatible struct for <code>ArrowSchema</code> from C Data Interface\nExports an array to raw pointers of the C Data Interface …\nImport ArrayData from the C Data Interface\nImport ArrayData from the C Data Interface\nExport to the C Data Interface\nA <code>RecordBatchReader</code> which imports Arrays from …\nABI-compatible struct for <code>ArrayStream</code> from C Stream …\nC function to get the error from last operation on the …\nC function to get next array from the stream\nC function to get schema from the stream\nPrivate data used by the stream\nC function to release the stream\nAn iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nThe <code>RunArrayIter</code> provides an idiomatic way to iterate over …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncreate a new iterator\nNumber of microseconds in a second\nNumber of microseconds in a day\nNumber of milliseconds in a second\nNumber of milliseconds in a day\nNumber of nanoseconds in a second\nNumber of nanoseconds in a day\nNumber of seconds in a day\nConstant from chrono crate\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveDate</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveDateTime</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>DateTime&lt;Tz&gt;</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>Duration</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveTime</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>\nconverts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveDateTime</code>\nconverts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveDateTime</code>\nconverts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(ms)</code>\nconverts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(s)</code>\nconverts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(ns)</code>\nconverts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(us)</code>\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nSimilar to timestamp_s_to_datetime but only compute <code>date</code>\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nSimilar to timestamp_s_to_datetime but only compute <code>time</code>\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nconverts a <code>i64</code> representing a <code>duration(ms)</code> to …\nconverts a <code>i64</code> representing a <code>duration(s)</code> to …\nAn Arrow <code>TimeZone</code>\nAn <code>Offset</code> for <code>Tz</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA subtype of primitive type that represents legal …\nTrait for primitive values.\nA subtype of primitive type that represents temporal …\nA timestamp type allows us to create array builders that …\nWidth of the type\nAn arrow binary array with i32 offsets\n<code>BinaryViewType</code> for string arrays\nA boolean datatype\nA trait over the variable-size byte array types\nA trait over the variable length bytes view array types\nthe corresponding Arrow data type of this primitive type.\nDatatype of array elements\nDatatype of array elements\nDefault values for <code>DataType</code>\n32-bit date type: the elapsed time since UNIX epoch in …\n64-bit date type: the elapsed time since UNIX epoch in …\nThe decimal type for a Decimal128Array\nThe decimal type for a Decimal256Array\nThe decimal type for a Decimal32Array\nThe decimal type for a Decimal64Array\nA trait over the decimal types, used by <code>PrimitiveArray</code> to …\nElapsed time type: microseconds.\nElapsed time type: milliseconds.\nElapsed time type: nanoseconds.\nElapsed time type: seconds.\n16-bit floating point number type.\n32-bit floating point number type.\n64-bit floating point number type.\n<code>ByteArrayType</code> for binary arrays\n<code>ByteArrayType</code> for string arrays\nIf element in array is utf8 encoded string.\nSigned 16-bit integer type.\nSigned 32-bit integer type.\nSigned 64-bit integer type.\nA signed 8-bit integer type.\nValue of an IntervalDayTime array\n“Calendar” interval type: days and milliseconds. See …\nValue of an IntervalMonthDayNano array\n“Calendar” interval type: months, days, and …\n32-bit “calendar” interval type: the number of whole …\nAn arrow binary array with i64 offsets\nAn arrow utf8 array with i64 offsets\nMaximum number of significant digits\nMaximum no of digits after the decimal point (note the …\nCorresponding Rust native type for the primitive type.\nType for representing its equivalent rust type i.e …\nType for representing its equivalent rust type i.e …\nType of offset i.e i32/i64\nType for owned corresponding to <code>Native</code>\n“Decimal32”, “Decimal64”, “Decimal128” or “…\n“Binary” or “String”, for use in error messages\n“Binary” or “String”, for use in displayed or …\nA subtype of primitive type that is used as run-ends index …\n<code>ByteViewType</code> for string arrays\nfn to create its <code>DataType</code>\n32-bit time type: the elapsed time since midnight in …\n32-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\nTimestamp microsecond type with an optional timezone.\nTimestamp millisecond type with an optional timezone.\nTimestamp nanosecond type with an optional timezone.\nTimestamp second type with an optional timezone.\nUnsigned 16-bit integer type.\nUnsigned 32-bit integer type.\nUnsigned 64-bit integer type.\nUnsigned 8-bit integer type.\nThe <code>TimeUnit</code> of this timestamp.\nAn arrow utf8 array with i32 offsets\nNumber of days\nNumber of days\nFormats the decimal value with the provided precision and …\nDetermines whether <code>value</code> contains no more than <code>precision</code> …\nCreates a ArrowTimestampType::Native from the provided …\nNumber of milliseconds\nNumber of months\nNumber of nanoseconds\nVerifies that every consecutive pair of <code>offsets</code> denotes a …\nVerifies that the provided buffers are valid for this …\nValidates that <code>value</code> contains no more than <code>precision</code> …\nValidate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>\nA slice-able <code>Buffer</code> containing bit-packed booleans\nA contiguous memory region that can be shared with other …\nA <code>MutableBuffer</code> is Arrow’s interface to build a <code>Buffer</code> …\nA <code>BooleanBuffer</code> used to encode validity for Arrow arrays\nA non-empty buffer of monotonically increasing, positive …\nA slice-able buffer of monotonically increasing, positive …\nA strongly-typed <code>Buffer</code> supporting zero-copy cloning and …\nIncreases the offset of this buffer by <code>offset</code>\nReturns a mutable raw pointer to this buffer’s internal …\nReturns a pointer to the start of this buffer.\nReturns a raw pointer to this buffer’s internal memory …\nReturns the byte slice stored in this buffer\nReturns the data stored in this buffer as a slice.\nReturns the data stored in this buffer as a mutable slice.\nReturns a <code>BitChunks</code> instance which can be used to iterate …\nReturns a <code>BitChunks</code> instance which can be used to iterate …\nReturns a slice of this buffer starting at a certain bit …\nApply a bitwise operation <code>op</code> to two inputs and return the …\nApply a bitwise operation <code>op</code> to four inputs and return the …\nApply a bitwise operation <code>op</code> to one input and return the …\nReturns the underlying <code>Buffer</code>\nApply a bitwise and to two inputs and return the result as …\nApply a bitwise and_not to two inputs and return the …\nApply a bitwise or to two inputs and return the result as …\nApply a bitwise xor to two inputs and return the result as …\nApply a bitwise not to one input and return the result as …\nReturns the capacity of this buffer. For externally owned …\nReturns the total capacity in this buffer, in bytes.\nRegister this <code>Buffer</code> with the provided <code>MemoryPool</code>\nRegister this <code>MutableBuffer</code> with the provided <code>MemoryPool</code>\nClear all existing data from this buffer.\nInvokes <code>f</code> with values <code>0..len</code> collecting the boolean …\nInvokes <code>f</code> with indexes <code>0..len</code> collecting the boolean …\nReturns true if all nulls in <code>other</code> also exist in self\nReturns the number of set bits in this buffer\nReturns the number of 1-bits in this buffer, starting from …\nReturns the pointer to the start of the buffer without the …\nReturns a new <code>NullBuffer</code> where each bit in the current …\nExtends this buffer from a slice of items that can be …\nExtends the buffer by <code>additional</code> bytes equal to <code>0u8</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new Buffer from a (internal) <code>Bytes</code>\nCreates a buffer from an existing memory region.\nAllocates a new MutableBuffer with <code>len</code> and capacity to be …\nCreate a new <code>OffsetBuffer</code> from the iterator of slice …\nInitializes a Buffer from a slice of items.\nCreates a <code>Buffer</code> from an <code>Iterator</code> with a trusted (upper) …\nCreates a <code>MutableBuffer</code> from an <code>Iterator</code> with a trusted …\nCreates a <code>MutableBuffer</code> from a boolean <code>Iterator</code> with a …\nCreate a <code>Buffer</code> from the provided <code>Vec</code> without copying\nReturns the physical index at which the logical array ends\nPerforms a binary search to find the physical index for …\nReturns the physical index at which the logical array …\nReturns the inner <code>ScalarBuffer</code>\nReturns the inner <code>Buffer</code>\nReturns the inner <code>Buffer</code>\nReturns the inner <code>BooleanBuffer</code>\nReturns the inner <code>ScalarBuffer</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner <code>ScalarBuffer</code>, consuming self\nReturns the inner <code>Buffer</code>, consuming self\nReturns the inner <code>Buffer</code>, consuming self\nReturns the inner <code>BooleanBuffer</code>\nReturns the inner <code>ScalarBuffer</code>, consuming self\nReturns <code>MutableBuffer</code> for mutating the buffer if this …\nConverts self into a <code>Vec</code>, if possible.\nReturns true if the buffer is empty.\nReturns whether this buffer is empty or not.\nReturns if the buffer is empty\nReturns true if this <code>BooleanBuffer</code> is empty\nReturns true if this <code>NullBuffer</code> is empty\nReturns true if this buffer is empty\nReturns <code>true</code> if the value at <code>idx</code> is null\nReturns <code>true</code> if the value at <code>idx</code> is not null\nReturns an iterator over the bits in this <code>BooleanBuffer</code>\nReturns an iterator over the bits in this <code>NullBuffer</code>\nReturns the number of bytes in the buffer\nReturns the length (the number of bytes written) in this …\nReturns the number of elements in the buffer\nReturns the length of this <code>BooleanBuffer</code> in bits\nReturns the length of this <code>NullBuffer</code> in bits\nReturns the logical length of the run-ends stored by this …\nGet an Iterator over the lengths of this <code>OffsetBuffer</code>\nReturns the maximum run-end encoded in the underlying …\nCreate a new <code>OffsetBuffer</code> from the provided <code>ScalarBuffer</code>\nAllocate a new MutableBuffer with initial capacity to be …\nCreate a new <code>ScalarBuffer</code> from a <code>Buffer</code>, and an <code>offset</code> and …\nCreate a new <code>BooleanBuffer</code> from a <code>Buffer</code>, an <code>offset</code> and …\nCreate a new <code>NullBuffer</code> computing the null count\nCreate a new <code>RunEndBuffer</code> from a <code>ScalarBuffer</code>, an <code>offset</code> …\nCreate a new <code>OffsetBuffer</code> containing a single 0 value\ncreates a new MutableBuffer with capacity and length …\nCreate a new <code>NullBuffer</code> of length <code>len</code> where all values are …\nCreate a new <code>BooleanBuffer</code> of <code>length</code> where all values are …\nCreate a new <code>OffsetBuffer</code> from the provided <code>ScalarBuffer</code>\nUnsafe function to create a new <code>ScalarBuffer</code> from a <code>Buffer</code>.\nCreate a new <code>NullBuffer</code> with the provided <code>buffer</code> and …\nCreate a new <code>RunEndBuffer</code> from an <code>ScalarBuffer</code>, an <code>offset</code> …\nCreate a new <code>BooleanBuffer</code> of <code>length</code> where all values are …\nCreate a new <code>NullBuffer</code> of length <code>len</code> where all values are …\nCreate a new <code>OffsetBuffer</code> containing <code>len + 1</code> <code>0</code> values\nReturns the null count for this <code>NullBuffer</code>\nReturns the offset of this <code>BooleanBuffer</code> in bits\nReturns the offset of this <code>NullBuffer</code> in bits\nReturns the logical offset into the run-ends stored by …\nReturns true if this <code>OffsetBuffer</code> is equal to <code>other</code>, using …\nReturns true if this <code>Buffer</code> is equal to <code>other</code>, using …\nReturns true if this <code>ScalarBuffer</code> is equal to <code>other</code>, using …\nReturns true if this <code>BooleanBuffer</code> is equal to <code>other</code>, …\nReturns the offset, in bytes, of <code>Self::ptr</code> to <code>Self::data</code>\nExtends the buffer with a new item, increasing its …\nExtends the buffer with a new item, without checking for …\nEnsures that this buffer has at least <code>self.len + additional</code>…\nResizes the buffer, either truncating its contents (with …\nReturns an iterator over the set bit positions in this …\nReturns a <code>u32</code> iterator over set bit positions without any …\nSafety\nEnsure that <code>count</code> bytes from <code>start</code> contain zero bits\nReturns a <code>BitSliceIterator</code> yielding contiguous ranges of …\nFree up unused memory.\nTries to shrink the capacity of the buffer as much as …\nShrinks the capacity of the buffer as much as possible. …\nFree up unused memory.\nFree up unused memory.\nFree up unused memory.\nFree up unused memory.\nReturns a zero-copy slice of this buffer with length <code>len</code> …\nReturns a new Buffer that is a slice of this buffer …\nReturns a zero-copy slice of this buffer with length <code>len</code> …\nSlices this <code>BooleanBuffer</code> by the provided <code>offset</code> and <code>length</code>\nSlices this <code>NullBuffer</code> by the provided <code>offset</code> and <code>length</code>\nSlices this <code>RunEndBuffer</code> by the provided <code>offset</code> and <code>length</code>\nReturns a new Buffer that is a slice of this buffer …\nReturns a <code>Buffer</code> containing the sliced contents of this …\nReturns the number of strong references to the buffer.\nTruncates this buffer to <code>len</code> bytes\nCalls the provided closure for each index in this null …\nCreates a <code>Buffer</code> from an <code>Iterator</code> with a trusted (upper) …\nCreates a <code>MutableBuffer</code> from an <code>Iterator</code> with a trusted …\nView buffer as a slice of a specific type.\nView buffer as a immutable slice of a specific type.\nView this buffer as a mutable slice of a specific type.\nComputes the union of the nulls in two optional <code>NullBuffer</code>\nReturns a <code>BitIndexIterator</code> over the valid indices in this …\nReturns a <code>BitSliceIterator</code> yielding contiguous ranges of …\nReturns the packed validity of this <code>NullBuffer</code> not …\nReturns the boolean value at index <code>i</code>.\nReturns the boolean value at index <code>i</code>.\nReturns the packed values of this <code>BooleanBuffer</code> not …\nReturns the values of this <code>RunEndBuffer</code> not including any …\nSet the bits in the range of <code>[0, end)</code> to 0 (if <code>val</code> is …\nAllocate a new MutableBuffer with initial capacity to be …\nConcatenate multiple <code>RecordBatch</code>es\nCastOptions provides a way to override the default cast …\nValid parts to extract from date/time/timestamp arrays.\nDay of the month, in range <code>1..=31</code>\nDay of the week, in range <code>0..=6</code>, where Monday is <code>0</code>\nDay of the week, in range <code>0..=6</code>, where Sunday is <code>0</code>\nDay of year, in range <code>1..=366</code>\nA builder to construct <code>FilterPredicate</code>\nA filtering predicate that can be applied to an <code>Array</code>\nA lexicographical comparator that wraps given array data …\nHour of the day, in range <code>0..=23</code>\nA lexicographical comparator that wraps given array data …\nMicrosecond of the second\nMillisecond of the second\nMinute of the hour, in range <code>0..=59</code>\nMonth in the year, in range <code>1..=12</code>\nNanosecond of the second\nA computed set of partitions, see <code>partition</code>\nQuarter of the year, in range <code>1..=4</code>\nSecond of the minute, in range <code>0..=59</code>\nAn iterator of <code>(usize, usize)</code> each representing an interval\nOne column to be used in lexicographical sort\nOptions that define the sort order of a given column\nOptions that define how <code>take</code> should behave\nweek of the year, in range <code>1..=53</code>, computed as per ISO 8601\nISO week of the year, in range <code>1..=53</code>\nCalendar year\nISO year, computed as per ISO 8601\nPerforms <code>AND</code> operation on two arrays. If either left or …\nLogical ‘and’ boolean values with Kleene logic\nPerforms <code>AND_NOT</code> operation on two arrays. If either left …\nSet this sort options to sort in ascending order\nAllies a binary infallable function to two <code>PrimitiveArray</code>s,\nApplies a binary and infallible function to values in two …\nReturns the bitwise and of all non-null input values.\nReturns the bitwise or of all non-null input values.\nReturns the bitwise xor of all non-null input values.\nReturns true if all non-null input values are true, …\nReturns true if any non-null input value is true, …\nConstruct the final <code>FilterPredicate</code>\nReturn true if a value of type <code>from_type</code> can be cast into …\nCast <code>array</code> to the provided data type and return a new …\nTry to cast <code>array</code> to <code>to_type</code> if possible.\nPerform bounds check before taking indices from values. If …\nlexicographically compare values at the wrapped columns …\nlexicographically compare values at the wrapped columns …\nConcatenate multiple Array of the same type into a single …\nConcatenates <code>batches</code> together into a single <code>RecordBatch</code>.\nNumber of rows being selected based on this <code>FilterPredicate</code>\nGiven an array, return a new array with the extracted …\nSet this sort options to sort in descending order\nWhether to sort in descending order\nReturns a filtered <code>values</code> <code>Array</code> where the corresponding …\nSelects rows from <code>values</code> based on this <code>FilterPredicate</code>\nReturns a filtered RecordBatch where the corresponding …\nConcatenates any buffered batches into a single <code>RecordBatch</code>…\nFormatting options when casting from temporal types to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if there are any completed batches\nTakes elements by index from a list of <code>Array</code>, creating a …\nInterleave rows by index from multiple <code>RecordBatch</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this contains no partitions\nReturns true if there is any buffered data\nReturns a non-null BooleanArray with whether each value of …\nReturns a non-null BooleanArray with whether each value of …\nComputation kernels on Arrow Arrays\nReturns the number of partitions\nSort a list of <code>ArrayRef</code> using <code>SortOptions</code> provided for …\nSort elements lexicographically from a list of <code>ArrayRef</code> …\nReturns the maximum value in the array, according to the …\nReturns the max of values in the array of <code>ArrowNumericType</code> …\nReturns the maximum value in the binary array, according …\nReturns the maximum value in the binary view array, …\nReturns the maximum value in the boolean array\nReturns the maximum value in the fixed size binary array, …\nReturns the maximum value in the string array, according …\nReturns the maximum value in the string view array, …\nReturns the minimum value in the array, according to the …\nReturns the min of values in the array of <code>ArrowNumericType</code> …\nReturns the minimum value in the binary array, according …\nReturns the minimum value in the binary view array, …\nReturns the minimum value in the boolean array.\nReturns the minimum value in the fixed size binary array, …\nReturns the minimum value in the string array, according …\nReturns the minimum value in the string view array, …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nCreate a new <code>BatchCoalescer</code>\nCreates a new iterator from a BooleanArray\nCreate a new <code>FilterBuilder</code> that can be used to construct a …\nCreate a new <code>SortOptions</code> struct\nRemoves and returns the next completed batch, if any.\nPerforms unary <code>NOT</code> operation on an arrays. If value is …\nReturns a new array with the same values and the validity …\nSet this sort options to sort nulls first\nWhether to sort nulls first\nSet this sort options to sort nulls last\nCompute an optimised representation of the provided <code>filter</code> …\nSort options for this column\nPerforms <code>OR</code> operation on two arrays. If either left or …\nLogical ‘or’ boolean values with Kleene logic\nIt’s unstable_sort, may not preserve the order of equal …\nGiven a list of lexicographically sorted columns, computes …\nPartition indices of an Arrow array into two categories:\nRemove null values by do a bitmask AND operation with null …\nPush all the rows from <code>batch</code> into the Coalescer\nPush a batch into the Coalescer after applying a filter\nReturns the range of each partition\nAssigns a rank to each value in <code>array</code> based on its …\nReturn BooleanArray indicating which strings in an array …\nReturn BooleanArray indicating which strings in an array …\nExtract all groups matched by a regular expression for a …\nhow to handle cast failures, either return NULL …\nReturn the schema of the output batches\nShifts array by defined number of items (to left or right) …\nSort the <code>ArrayRef</code> using <code>SortOptions</code>.\nSort the <code>ArrayRef</code> partially.\nSort elements from <code>ArrayRef</code> into an unsigned integer (…\nReturns the sum of values in the primitive array.\nReturns the sum of values in the array.\nReturns the sum of values in the array.\nReturns the sum of values in the primitive array.\nTake elements by index from Array, creating a new Array …\nFor each ArrayRef in the <code>Vec&lt;ArrayRef&gt;</code>, take elements by …\nTake rows by index from <code>RecordBatch</code> and returns a new …\nApplies the provided fallible binary operation across <code>a</code> …\nApplies the provided fallible binary operation across <code>a</code> …\nCreate a new lex comparator that will wrap the given sort …\nCreate a new lex comparator that will wrap the given sort …\nSee <code>PrimitiveArray::try_unary</code>\nSee <code>PrimitiveArray::try_unary_mut</code>\nSee <code>PrimitiveArray::unary</code>\nSee <code>PrimitiveArray::unary_mut</code>\nReturns the value of the target field when selected, or …\nThe column to sort\nSet this sort options to sort descending if argument is …\nSet this sort options to sort nulls first if argument is …\nDefines aggregations over Arrow arrays.\nKernels for operating on <code>PrimitiveArray</code>s\nModule contains bitwise operations on arrays\nDefines boolean kernels on Arrow <code>BooleanArray</code>’s, e.g. <code>AND</code>…\nCast kernels to convert <code>ArrayRef</code>  between supported …\nCast <code>array</code> to the provided data type and return a new …\n<code>Parser</code> implementations for converting strings to Arrow …\nComparison kernels for <code>Array</code>s.\n<code>BatchCoalescer</code>  concatenates multiple <code>RecordBatch</code>es after …\nComparison kernels for <code>Array</code>s.\nDefines concat kernel for <code>ArrayRef</code>\nProvides utility functions for concatenation of elements …\nDefines filter kernels\nInterleave elements from multiple arrays\nDefines kernel for length of string arrays and binary …\nImplements the <code>nullif</code> function for Arrow arrays.\nDefines numeric arithmetic kernels on <code>PrimitiveArray</code>, such …\nDefines partition kernel for <code>ArrayRef</code>\nProvides <code>rank</code> function to assign a rank to each value in …\nDefines kernel to extract substrings based on a regular …\nDefines sort kernel for <code>ArrayRef</code>\nDefines kernel to extract a substring of an Array …\nDefines take kernel for Array\nDefines temporal kernels for time and date related …\nDefines union_extract kernel for UnionArray\nDefines windowing functions, like <code>shift</code>ing\n<code>zip</code>: Combine values from two arrays based on boolean mask\nReturns the bitwise and of all non-null input values.\nReturns the bitwise or of all non-null input values.\nReturns the bitwise xor of all non-null input values.\nReturns true if all non-null input values are true, …\nReturns true if any non-null input value is true, …\nReturns the maximum value in the array, according to the …\nReturns the max of values in the array of <code>ArrowNumericType</code> …\nReturns the maximum value in the binary array, according …\nReturns the maximum value in the binary view array, …\nReturns the maximum value in the boolean array\nReturns the maximum value in the fixed size binary array, …\nReturns the maximum value in the string array, according …\nReturns the maximum value in the string view array, …\nReturns the minimum value in the array, according to the …\nReturns the min of values in the array of <code>ArrowNumericType</code> …\nReturns the minimum value in the binary array, according …\nReturns the minimum value in the binary view array, …\nReturns the minimum value in the boolean array.\nReturns the minimum value in the fixed size binary array, …\nReturns the minimum value in the string array, according …\nReturns the minimum value in the string view array, …\nReturns the sum of values in the primitive array.\nReturns the sum of values in the array.\nReturns the sum of values in the array.\nReturns the sum of values in the primitive array.\nAllies a binary infallable function to two <code>PrimitiveArray</code>s,\nApplies a binary and infallible function to values in two …\nApplies the provided fallible binary operation across <code>a</code> …\nApplies the provided fallible binary operation across <code>a</code> …\nSee <code>PrimitiveArray::try_unary</code>\nSee <code>PrimitiveArray::try_unary_mut</code>\nSee <code>PrimitiveArray::unary</code>\nSee <code>PrimitiveArray::unary_mut</code>\nPerform <code>left &amp; right</code> operation on two arrays. If either …\nPerform <code>left &amp; !right</code> operation on two arrays. If either …\nPerform bitwise <code>and</code> every value in an array with the …\nPerform <code>!array</code> operation on array. If array value is null …\nPerform <code>left | right</code> operation on two arrays. If either …\nPerform bitwise <code>or</code> every value in an array with the …\nPerform bitwise <code>left &lt;&lt; right</code> operation on two arrays. If …\nPerform bitwise <code>left &lt;&lt; right</code> every value in an array with …\nPerform bitwise <code>left &gt;&gt; right</code> operation on two arrays. If …\nPerform bitwise <code>left &gt;&gt; right</code> every value in an array with …\nPerform <code>left ^ right</code> operation on two arrays. If either …\nPerform bitwise <code>xor</code> every value in an array with the …\nPerforms <code>AND</code> operation on two arrays. If either left or …\nLogical ‘and’ boolean values with Kleene logic\nPerforms <code>AND_NOT</code> operation on two arrays. If either left …\nReturns a non-null BooleanArray with whether each value of …\nReturns a non-null BooleanArray with whether each value of …\nPerforms unary <code>NOT</code> operation on an arrays. If value is …\nPerforms <code>OR</code> operation on two arrays. If either left or …\nLogical ‘or’ boolean values with Kleene logic\nCastOptions provides a way to override the default cast …\nReturn true if a value of type <code>from_type</code> can be cast into …\nCast <code>array</code> to the provided data type and return a new …\nTry to cast <code>array</code> to <code>to_type</code> if possible.\nFormatting options when casting from temporal types to …\nhow to handle cast failures, either return NULL …\nA Century\nA Day\nA Decade\nAn Hour\nConfig to parse interval strings\nRepresents the units of an interval, with each variant …\nA Microsecond\nA Millisecond\nA Minute\nA Month\nA tuple representing (months, days, nanoseconds) in an …\nA Nanosecond\nSpecialized parsing implementations to convert strings to …\nA Second\nA Week\nA Year\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new IntervalParseConfig with the given default …\nParse a string to the native type\nParse the string format decimal value to i128/i256 format …\nParse a string to the native type with a format string\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nAccepts a string and parses it relative to the provided …\nAccepts a string in ISO8601 standard format and some …\nAccepts a string in RFC3339 / ISO8601 standard format and …\nCompares two <code>GenericByteViewArray</code> at index <code>left_idx</code> and …\nPerform <code>left IS DISTINCT FROM right</code> operation on two <code>Datum</code>\nPerform <code>left == right</code> operation on two <code>Datum</code>.\nPerform <code>left &gt; right</code> operation on two <code>Datum</code>.\nPerform <code>left &gt;= right</code> operation on two <code>Datum</code>.\nPerform <code>left &lt; right</code> operation on two <code>Datum</code>.\nPerform <code>left &lt;= right</code> operation on two <code>Datum</code>.\nPerform <code>left != right</code> operation on two <code>Datum</code>.\nPerform <code>left IS NOT DISTINCT FROM right</code> operation on two …\nConcatenate multiple <code>RecordBatch</code>es\nA trait for Arrow String Arrays, currently three types are …\nPerform SQL <code>CONTAINS(left, right)</code>\nPerform SQL <code>ENDSWITH(left, right)</code>\nPerform SQL <code>left ILIKE right</code>\nChecks if a <code>GenericListArray</code> contains a value in the …\nChecks if a <code>GenericListArray</code> contains a value in the …\nReturns true if all data within this string array is ASCII\nConstructs a new iterator\nPerform SQL <code>left LIKE right</code>\nPerform SQL <code>left NOT ILIKE right</code>\nPerform SQL <code>left NOT LIKE right</code>\nReturn BooleanArray indicating which strings in an array …\nReturn BooleanArray indicating which strings in an array …\nPerform SQL <code>STARTSWITH(left, right)</code>\nConcatenate multiple Array of the same type into a single …\nConcatenates <code>batches</code> together into a single <code>RecordBatch</code>.\nReturns the elementwise concatenation of a …\nReturns the elementwise concatenation of a <code>GenericByteArray</code>…\nReturns the elementwise concatenation of <code>Array</code>s.\nReturns the elementwise concatenation of a …\nReturns the elementwise concatenation of <code>StringArray</code>.\nA builder to construct <code>FilterPredicate</code>\nA filtering predicate that can be applied to an <code>Array</code>\nAn iterator of <code>(usize, usize)</code> each representing an interval\nReturns a filtered <code>values</code> <code>Array</code> where the corresponding …\nReturns a filtered RecordBatch where the corresponding …\nRemove null values by do a bitmask AND operation with null …\nTakes elements by index from a list of <code>Array</code>, creating a …\nInterleave rows by index from multiple <code>RecordBatch</code> …\nReturns an array of Int32/Int64 denoting the number of …\nReturns an array of Int32/Int64 denoting the length of …\nReturns a new array with the same values and the validity …\nPerform <code>lhs + rhs</code>, returning an error on overflow\nPerform <code>lhs + rhs</code>, wrapping on overflow for …\nPerform <code>lhs / rhs</code>\nPerform <code>lhs * rhs</code>, returning an error on overflow\nPerform <code>lhs * rhs</code>, wrapping on overflow for …\nNegates each element of  <code>array</code>, returning an error on …\nNegates each element of  <code>array</code>, wrapping on overflow for …\nPerform <code>lhs % rhs</code>\nPerform <code>lhs - rhs</code>, returning an error on overflow\nPerform <code>lhs - rhs</code>, wrapping on overflow for …\nA computed set of partitions, see <code>partition</code>\nGiven a list of lexicographically sorted columns, computes …\nAssigns a rank to each value in <code>array</code> based on its …\nReturn BooleanArray indicating which strings in an array …\nReturn BooleanArray indicating which strings in an array …\nExtract all groups matched by a regular expression for a …\nA lexicographical comparator that wraps given array data …\nA lexicographical comparator that wraps given array data …\nOne column to be used in lexicographical sort\nOptions that define the sort order of a given column\nWhether to sort in descending order\nSort a list of <code>ArrayRef</code> using <code>SortOptions</code> provided for …\nSort elements lexicographically from a list of <code>ArrayRef</code> …\nWhether to sort nulls first\nSort options for this column\nIt’s unstable_sort, may not preserve the order of equal …\nPartition indices of an Arrow array into two categories:\nSort the <code>ArrayRef</code> using <code>SortOptions</code>.\nSort the <code>ArrayRef</code> partially.\nSort elements from <code>ArrayRef</code> into an unsigned integer (…\nThe column to sort\nReturns an <code>ArrayRef</code> with substrings of all the elements in …\nSubstrings based on character index\nOptions that define how <code>take</code> should behave\nPerform bounds check before taking indices from values. If …\nTake elements by index from Array, creating a new Array …\nFor each ArrayRef in the <code>Vec&lt;ArrayRef&gt;</code>, take elements by …\nTake rows by index from <code>RecordBatch</code> and returns a new …\nValid parts to extract from date/time/timestamp arrays.\nDay of the month, in range <code>1..=31</code>\nDay of the week, in range <code>0..=6</code>, where Monday is <code>0</code>\nDay of the week, in range <code>0..=6</code>, where Sunday is <code>0</code>\nDay of year, in range <code>1..=366</code>\nHour of the day, in range <code>0..=23</code>\nMicrosecond of the second\nMillisecond of the second\nMinute of the hour, in range <code>0..=59</code>\nMonth in the year, in range <code>1..=12</code>\nNanosecond of the second\nQuarter of the year, in range <code>1..=4</code>\nSecond of the minute, in range <code>0..=59</code>\nweek of the year, in range <code>1..=53</code>, computed as per ISO 8601\nISO week of the year, in range <code>1..=53</code>\nCalendar year\nISO year, computed as per ISO 8601\nGiven an array, return a new array with the extracted …\nReturns the value of the target field when selected, or …\nShifts array by defined number of items (to left or right) …\nZip two arrays by some boolean mask.\nA subtype of primitive type that represents legal …\nTrait expressing a Rust type that has the same in-memory …\nTrait for <code>ArrowNativeType</code> that adds checked and unchecked …\nA subtype of primitive type that represents numeric values.\nTrait for primitive values.\nTrait for primitive values.\nA subtype of primitive type that represents temporal …\nA timestamp type allows us to create array builders that …\nWidth of the type\nOpaque binary data of variable length.\nAn arrow binary array with i32 offsets\nOpaque binary data of variable length.\n<code>BinaryViewType</code> for string arrays\nA boolean datatype representing the values <code>true</code> and <code>false</code>.\nA boolean datatype\nA trait over the variable-size byte array types\nA trait over the variable length bytes view array types\nthe corresponding Arrow data type of this primitive type.\nthe corresponding Arrow data type of this primitive type.\nDatatype of array elements\nDatatype of array elements\nThe corresponding Arrow data type\nThe maximum precision for DataType::Decimal128 values\nThe maximum scale for DataType::Decimal128 values\nThe maximum precision for DataType::Decimal256 values\nThe maximum scale for DataType::Decimal256 values\nThe default scale for DataType::Decimal32 values\nThe maximum precision for DataType::Decimal32 values\nThe maximum scale for DataType::Decimal32 values\nThe default scale for DataType::Decimal64 values\nThe maximum precision for DataType::Decimal64 values\nThe maximum scale for DataType::Decimal64 values\nThe default scale for DataType::Decimal128 and …\nDefault values for <code>DataType</code>\nDatatypes supported by this implementation of Apache Arrow.\nA signed 32-bit date representing the elapsed time since …\n32-bit date type: the elapsed time since UNIX epoch in …\nA signed 64-bit date representing the elapsed time since …\n64-bit date type: the elapsed time since UNIX epoch in …\nIndicates the number of elapsed days and milliseconds, …\nExact 128-bit width decimal value with precision and scale\nThe decimal type for a Decimal128Array\nExact 256-bit width decimal value with precision and scale\nThe decimal type for a Decimal256Array\nExact 32-bit width decimal value with precision and scale\nThe decimal type for a Decimal32Array\nExact 64-bit width decimal value with precision and scale\nThe decimal type for a Decimal64Array\nA trait over the decimal types, used by <code>PrimitiveArray</code> to …\nDense union layout\nA dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …\nMeasure of elapsed time in either seconds, milliseconds, …\nElapsed time type: microseconds.\nElapsed time type: milliseconds.\nElapsed time type: nanoseconds.\nElapsed time type: seconds.\nDescribes a single column in a <code>Schema</code>.\nA reference counted <code>Field</code>\nA cheaply cloneable, owned slice of <code>FieldRef</code>\nOpaque binary data of fixed size. Enum parameter specifies …\nA list of some logical data type with fixed length.\nA 16-bit floating point number.\n16-bit floating point number type.\nA 32-bit floating point number.\n32-bit floating point number type.\nA 64-bit floating point number.\n64-bit floating point number type.\n<code>ByteArrayType</code> for binary arrays\n<code>ByteArrayType</code> for string arrays\nIf element in array is utf8 encoded string.\nA signed 16-bit integer.\nSigned 16-bit integer type.\nA signed 32-bit integer.\nSigned 32-bit integer type.\nA signed 64-bit integer.\nSigned 64-bit integer type.\nA signed 8-bit integer.\nA signed 8-bit integer type.\nA “calendar” interval which models types that don’t …\nValue of an IntervalDayTime array\n“Calendar” interval type: days and milliseconds. See …\nValue of an IntervalMonthDayNano array\n“Calendar” interval type: months, days, and …\nYEAR_MONTH, DAY_TIME, MONTH_DAY_NANO interval in SQL style.\n32-bit “calendar” interval type: the number of whole …\nDefault list member field name\nOpaque binary data of variable length and 64-bit offsets.\nAn arrow binary array with i64 offsets\nA list of some logical data type with variable length and …\n(NOT YET FULLY SUPPORTED)  A list of some logical data …\nA variable-length string in Unicode with UFT-8 encoding …\nAn arrow utf8 array with i64 offsets\nA list of some logical data type with variable length.\n(NOT YET FULLY SUPPORTED)  A list of some logical data …\nThe maximum value that can be represented by this integer …\nThe maximum value that can be represented\nThe maximum value that can be represented\n<code>MAX_DECIMAL128_FOR_EACH_PRECISION[p]</code> holds the maximum <code>i128</code>…\n<code>MAX_DECIMAL256_FOR_EACH_PRECISION[p]</code> holds the maximum <code>i256</code>…\n<code>MAX_DECIMAL32_FOR_EACH_PRECISION[p]</code> holds the maximum <code>i32</code> …\n<code>MAX_DECIMAL64_FOR_EACH_PRECISION[p]</code> holds the maximum <code>i64</code> …\n<code>MAX_DECIMAL_FOR_EACH_PRECISION[p-1]</code> holds the maximum <code>i128</code> …\nMaximum number of significant digits\nMaximum no of digits after the decimal point (note the …\nThe maximum value and identity for the <code>min</code> aggregation. …\nThe minimum value that can be represented by this integer …\nThe minimum value that can be represented\nThe minimum value that can be represented\nThe multiplicative inverse for this integer type, i.e. <code>-1</code>.\nThe multiplicative inverse, i.e. <code>-1</code>.\nThe multiplicative inverse, i.e. <code>-1</code>.\n<code>MIN_DECIMAL_FOR_EACH_PRECISION[p]</code> holds the minimum <code>i128</code> …\n<code>MIN_DECIMAL256_FOR_EACH_PRECISION[p]</code> holds the minimum <code>i256</code>…\n<code>MIN_DECIMAL32_FOR_EACH_PRECISION[p]</code> holds the minimum …\n<code>MIN_DECIMAL64_FOR_EACH_PRECISION[p]</code> holds the minimum <code>i64</code> …\n<code>MIN_DECIMAL_FOR_EACH_PRECISION[p-1]</code> holds the minimum <code>i128</code> …\nThe minimum value and identity for the <code>max</code> aggregation. …\nA Map is a logical nested type that is represented as\nTime in microseconds.\nTime in milliseconds.\nA triple of the number of elapsed months, days, and …\nTime in nanoseconds.\nCorresponding Rust native type for the primitive type.\nCorresponding Rust native type for the primitive type.\nType for representing its equivalent rust type i.e …\nType for representing its equivalent rust type i.e …\nNull type\nThe multiplicative identity for this integer type, i.e. <code>1</code>.\nThe multiplicative identity, i.e. <code>1</code>.\nThe multiplicative identity, i.e. <code>1</code>.\nThe multiplicative identity\nType of offset i.e i32/i64\nType for owned corresponding to <code>Native</code>\n“Decimal32”, “Decimal64”, “Decimal128” or “…\n“Binary” or “String”, for use in error messages\n“Binary” or “String”, for use in displayed or …\nA run-end encoding (REE) is a variation of run-length …\nA subtype of primitive type that is used as run-ends index …\nDescribes the meta-data of an ordered sequence of relative …\nA builder to facilitate building a <code>Schema</code> from iteratively …\nA reference-counted reference to a <code>Schema</code>.\nTime in seconds.\nSparse union layout\n<code>ByteViewType</code> for string arrays\nA nested datatype that contains a number of sub-fields.\nfn to create its <code>DataType</code>\nA signed 32-bit time representing the elapsed time since …\n32-bit time type: the elapsed time since midnight in …\n32-bit time type: the elapsed time since midnight in …\nA signed 64-bit time representing the elapsed time since …\n64-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\nAn absolute length of time in seconds, milliseconds, …\nA timestamp with an optional timezone.\nTimestamp microsecond type with an optional timezone.\nTimestamp millisecond type with an optional timezone.\nTimestamp nanosecond type with an optional timezone.\nTimestamp second type with an optional timezone.\nAllows conversion from supported Arrow types to a byte …\nAn unsigned 16-bit integer.\nUnsigned 16-bit integer type.\nAn unsigned 32-bit integer.\nUnsigned 32-bit integer type.\nAn unsigned 64-bit integer.\nUnsigned 64-bit integer type.\nAn unsigned 8-bit integer.\nUnsigned 8-bit integer type.\nThe <code>TimeUnit</code> of this timestamp.\nA nested datatype that can represent slots of differing …\nA cheaply cloneable, owned collection of <code>FieldRef</code> and …\nSparse or Dense union layouts\nA variable-length string in Unicode with UTF-8 encoding.\nAn arrow utf8 array with i32 offsets\nA variable-length string in Unicode with UTF-8 encoding\nIndicates the number of elapsed whole months, stored as …\nThe additive identity for this integer type, i.e. <code>0</code>.\nThe additive identity i.e. <code>0</code>.\nThe additive identity i.e. <code>0</code>.\nThe additive identity\nChecked addition operation\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow Date32Type\nAdds the given IntervalDayTimeType to an arrow Date64Type\nAdds the given IntervalDayTimeType to an arrow Date64Type\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nWrapping addition operation\nAdds the given IntervalYearMonthType to an arrow …")