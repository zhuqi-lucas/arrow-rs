searchState.loadedDescShard("arrow_array", 0, "The central type in Apache Arrow are arrays, which are a …\nTrait for <code>ArrowNativeType</code> that adds checked and unchecked …\nA subtype of primitive type that represents numeric values.\nA possibly <code>Scalar</code> <code>Array</code>\nThe maximum value and identity for the <code>min</code> aggregation. …\nThe minimum value and identity for the <code>max</code> aggregation. …\nThe multiplicative identity\nA two-dimensional batch of column-oriented data with a …\nGeneric implementation of RecordBatchReader that wraps an …\nOptions that control the behaviour used when creating a …\nTrait for types that can read <code>RecordBatch</code>’s.\nTrait for types that can write <code>RecordBatch</code>’s.\nA wrapper around a single value <code>Array</code> that implements <code>Datum</code>…\nThe additive identity\nChecked addition operation\nWrapping addition operation\nThe concrete array definitions\nDefines push-based APIs for constructing arrays\nDefines helper functions for downcasting <code>dyn Array</code> to …\nWrite footer or termination data, then mark the writer as …\nCompare operation\nCreates an array from a literal slice of values, suitable …\nContains utility functions for shifting Date objects.\nChecked division operation\nWrapping division operation\nDowncast an <code>Array</code> to a <code>DictionaryArray</code> based on its …\nGiven one or more expressions evaluating to an integer …\nGiven one or more expressions evaluating to an integer …\nGiven one or more expressions evaluating to primitive …\nDowncast an <code>Array</code> to a <code>PrimitiveArray</code> based on its <code>DataType</code>\nDowncast an <code>Array</code> to a <code>RunArray</code> based on its <code>DataType</code>, …\nGiven one or more expressions evaluating to an integer …\nGiven one or more expressions evaluating to primitive …\nDowncast an <code>Array</code> to a temporal <code>PrimitiveArray</code> based on …\nContains declarations to bind to the C Data Interface.\nContains declarations to bind to the C Stream Interface.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value for this <code>Datum</code> and a boolean indicating …\nGet a reference to a column’s array by name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquality operation\nGreater than equals operation\nGreater than operation\nLess than equals operation\nLess than operation\nNot equal operation\nReturns true if zero else false\nIdiomatic iterators for <code>Array</code>\nMatch field names of structs and lists. If set to <code>true</code>, …\nChecked remainder operation\nWrapping remainder operation\nChecked multiplication operation\nWrapping multiplication operation\nChecked negation operation\nWrapping negation operation\nChecked exponentiation operation\nWrapping exponentiation operation\nA two-dimensional batch of column-oriented data with a …\nCreates a record batch from literal slice of values, …\nThe number of rows in this RecordBatch\nOptional row count, useful for specifying a row count for …\nIdiomatic iterator for <code>RunArray</code>\nReturns the schema of this <code>RecordBatchReader</code>.\nChecked subtraction operation\nWrapping subtraction operation\nConversion methods for dates and times.\nTimezone for timestamp arrays\nZero-sized types used to parameterize generic array …\nWrite a single batch to the writer.\nTrait for <code>ArrowNativeType</code> that adds checked and unchecked …\nThe maximum value and identity for the <code>min</code> aggregation. …\nThe minimum value and identity for the <code>max</code> aggregation. …\nThe multiplicative identity\nThe additive identity\nChecked addition operation\nWrapping addition operation\nCompare operation\nChecked division operation\nWrapping division operation\nEquality operation\nGreater than equals operation\nGreater than operation\nLess than equals operation\nLess than operation\nNot equal operation\nReturns true if zero else false\nChecked remainder operation\nWrapping remainder operation\nChecked multiplication operation\nWrapping multiplication operation\nChecked negation operation\nWrapping negation operation\nChecked exponentiation operation\nWrapping exponentiation operation\nChecked subtraction operation\nWrapping subtraction operation\nA <code>DictionaryArray</code> with the key type erased\nAn array in the arrow columnar format\nA generic trait for accessing the values of an <code>Array</code>\nA reference-counted reference to a generic <code>Array</code>\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i32</code> offsets\nA trait for Arrow String Arrays, currently three types are …\nA <code>GenericByteViewArray</code> of <code>[u8]</code>\nAn array of boolean values\nA <code>PrimitiveArray</code> of days since UNIX epoch stored as <code>i32</code>\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of 128-bit fixed point decimals\nA <code>PrimitiveArray</code> of 256-bit fixed point decimals\nA <code>PrimitiveArray</code> of 32-bit fixed point decimals\nA <code>PrimitiveArray</code> of 64-bit fixed point decimals\nAn array of dictionary encoded values\nA <code>PrimitiveArray</code> of elapsed durations in microseconds\nA <code>PrimitiveArray</code> of elapsed durations in milliseconds\nA <code>PrimitiveArray</code> of elapsed durations in nanoseconds\nA <code>PrimitiveArray</code> of elapsed durations in seconds\nAn array of fixed size binary arrays\nAn array of [fixed length lists], similar to JSON arrays …\nA <code>PrimitiveArray</code> of <code>f16</code>\nA <code>PrimitiveArray</code> of <code>f32</code>\nA <code>PrimitiveArray</code> of <code>f64</code>\nA <code>GenericByteArray</code> for storing <code>[u8]</code>\nAn array of variable length byte arrays\nVariable-size Binary View Layout: An array of variable …\nAn array of variable length lists, similar to JSON arrays …\nAn array of variable length lists, specifically in the …\nA <code>GenericByteArray</code> for storing <code>str</code>\nTrue for 64 bit offset size and false for 32 bit offset …\nA <code>PrimitiveArray</code> of <code>i16</code>\nA <code>DictionaryArray</code> indexed by <code>i16</code>\nA <code>RunArray</code> with <code>i16</code> run ends\nA <code>PrimitiveArray</code> of <code>i32</code>\nA <code>DictionaryArray</code> indexed by <code>i32</code>\nA <code>RunArray</code> with <code>i32</code> run ends\nA <code>PrimitiveArray</code> of <code>i64</code>\nA <code>DictionaryArray</code> indexed by <code>i64</code>\nA <code>RunArray</code> with <code>i64</code> run ends\nA <code>PrimitiveArray</code> of <code>i8</code>\nA <code>DictionaryArray</code> indexed by <code>i8</code>\nA <code>PrimitiveArray</code> of “calendar” intervals in days and …\nA <code>PrimitiveArray</code> of “calendar” intervals in  months, …\nA <code>PrimitiveArray</code> of “calendar” intervals in whole …\nThe Arrow type of the element being accessed.\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i64</code> offsets\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nA <code>GenericListViewArray</code> of variable size lists, storing …\nA <code>GenericStringArray</code> of <code>str</code> using <code>i64</code> offsets\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nA <code>GenericListViewArray</code> of variable size lists, storing …\nThe max <code>usize</code> offset\nAn array of key-value maps\nAn optional primitive value\nAn array of null values\nA type that can be used within a variable-size array to …\nPrefix for the offset size\nAn array of primitive values, of type <code>ArrowPrimitiveType</code>\nAn array of run-end encoded values\nA <code>GenericStringArray</code> of <code>str</code> using <code>i32</code> offsets\nA trait for Arrow String Arrays, currently three types are …\nA <code>GenericByteViewArray</code> that stores utf8 data\nAn array of structs\nA <code>PrimitiveArray</code> of milliseconds since midnight stored as …\nA <code>PrimitiveArray</code> of seconds since midnight stored as <code>i32</code>\nA <code>PrimitiveArray</code> of microseconds since midnight stored as …\nA <code>PrimitiveArray</code> of nanoseconds since midnight stored as …\nA <code>PrimitiveArray</code> of microseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of nanoseconds since UNIX epoch stored as …\nA <code>PrimitiveArray</code> of seconds since UNIX epoch stored as <code>i64</code>\nA <code>DictionaryArray</code> typed on its child values array\nA <code>RunArray</code> typed typed on its child values array\nA <code>PrimitiveArray</code> of <code>u16</code>\nA <code>DictionaryArray</code> indexed by <code>u16</code>\nA <code>PrimitiveArray</code> of <code>u32</code>\nA <code>DictionaryArray</code> indexed by <code>u32</code>\nA <code>PrimitiveArray</code> of <code>u64</code>\nA <code>DictionaryArray</code> indexed by <code>u64</code>\nA <code>PrimitiveArray</code> of <code>u8</code>\nA <code>DictionaryArray</code> indexed by <code>u8</code>\nAn array of values of varying types\nReturns the array as <code>Any</code> so that it can be downcasted to a …\nReturns a reference to the <code>DataType</code> of this array.\nThe dictionary array\nThe <code>StructArray</code> that is the direct child of this array\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a GenericBinaryArray from a vector of Optional …\nCreates a GenericBinaryArray from a vector of byte slices\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory pointed to by …\nHelper function that gets offset from an <code>ArrayData</code>\nGet a reference to a column’s array by name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying data of this array\nReturns true if all data within this string array is ASCII\nReturns whether this array is empty.\nReturns whether the element at <code>index</code> is null according to …\nReturns <code>false</code> if the array is guaranteed to not contain …\nValues are ordered.\nValues are ordered.\nValues are ordered.\nValues are ordered.\nValues are ordered.\nValues are ordered.\nValues are ordered.\nValues are ordered.\nValues are ordered.\nReturns whether the element at <code>index</code> is <em>not</em> null, the …\nConstructs a new iterator\nConstructs a new iterator\nReturns the primitive keys of this dictionary as an <code>Array</code>\nThe keys of this dictionary. These are constructed from the\nThe keys of this dictionary. These are constructed from the\nThe keys of this dictionary. These are constructed from the\nThe keys of this dictionary. These are constructed from the\nThe keys of this dictionary. These are constructed from the\nThe keys of this dictionary. These are constructed from the\nThe keys of this dictionary. These are constructed from the\nThe keys of this dictionary. These are constructed from the\nThe keys of this dictionary. These are constructed from the\nReturns the length (i.e., number of elements) of this …\nReturns the total number of logical null values in this …\nReturns a potentially computed <code>NullBuffer</code> that represents …\nConstructs an array using the input <code>data</code>. Returns a …\nCorresponding Rust native type if available\nCreates a new empty array\nCreates a new array of <code>data_type</code> of length <code>length</code> filled …\nReturns the keys of this dictionary as usize\nContains the <code>NullArray</code> type.\nReturns the total number of physical null values in this …\nReturns the null buffer of this array if any.\nReturns the offset into the underlying data used by this …\nHelper function for printing potentially long arrays.\nThe run array\nShrinks the capacity of any exclusively owned buffer as …\nFor shared buffers, this is a no-op.\nReturns a zero-copy slice of this array with the indicated …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns the underlying data of this array\nbuilds a StructArray from a vector of names and arrays.\nReturns the element at index <code>i</code>\nThe start and end offsets of each entry\nReturns the element at index <code>i</code>\nReturns the values of this dictionary\nArray of dictionary values (can be any DataType).\nArray of dictionary values (can be any DataType).\nArray of dictionary values (can be any DataType).\nArray of dictionary values (can be any DataType).\nArray of dictionary values (can be any DataType).\nArray of dictionary values (can be any DataType).\nArray of dictionary values (can be any DataType).\nArray of dictionary values (can be any DataType).\nArray of dictionary values (can be any DataType).\nThe values of the dictionary\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nThe values of the run_array\nCreate a new <code>DictionaryArray</code> replacing <code>values</code> with the new …\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i32</code> offsets\nA <code>GenericByteArray</code> for storing <code>[u8]</code>\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i64</code> offsets\nCreates a GenericBinaryArray from a vector of Optional …\nCreates a GenericBinaryArray from a vector of byte slices\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nAn array of boolean values\nReturns a new boolean array builder\nReturns the number of non null, false values within this …\nCreate a <code>BooleanArray</code> by evaluating the binary operation …\nCreate a <code>BooleanArray</code> by evaluating the operation for each …\nDeconstruct this array into its constituent parts\nReturns whether this array is empty.\nconstructs a new iterator\nReturns the length of this array.\nCreate a new <code>BooleanArray</code> from the provided values and …\nCreate a new <code>BooleanArray</code> from a <code>Buffer</code> specified by <code>offset</code>…\nCreate a new <code>BooleanArray</code> from <code>&amp;[u8]</code> This method uses …\nCreate a new <code>BooleanArray</code> with length <code>len</code> consisting only …\nCreate a new <code>Scalar</code> from <code>value</code>\nReturns a zero-copy slice of this array with the indicated …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns the number of non null, true values within this …\nReturns the boolean value at index <code>i</code>.\nReturns the boolean value at index <code>i</code>.\nReturns the underlying <code>BooleanBuffer</code> holding all the …\nData type of the array.\nAn array of variable length byte arrays\nCreates a <code>GenericByteArray</code> based on an iterator of values …\nReturns <code>GenericByteBuilder</code> of this byte array for mutating …\nDeconstruct this array into its constituent parts\nReturns true if all data within this array is ASCII\nconstructs a new iterator\nCreate a new <code>GenericByteArray</code> from the provided parts, …\nCreate a new <code>GenericByteArray</code> of length <code>len</code> where all …\nCreate a new <code>Scalar</code> from <code>v</code>\nCreate a new <code>GenericByteArray</code> from the provided parts, …\nReturns the number of <code>Unicode Scalar Value</code> in the string …\nReturns a reference to the offsets of this array\nReturns a zero-copy slice of this array with the indicated …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nFallibly creates a <code>GenericStringArray</code> from a …\nCreate a new <code>GenericByteArray</code> from the provided parts, …\nReturns the element at index <code>i</code>\nReturns the raw value data\nReturns the length for value at index <code>i</code>.\nReturns the offset values in the offsets buffer\nReturns the element at index <code>i</code>\nReturns the values of this array\nA <code>GenericByteViewArray</code> of <code>[u8]</code>\nVariable-size Binary View Layout: An array of variable …\nA <code>GenericByteViewArray</code> that stores utf8 data\nReturns an iterator over the bytes of this array, …\nCompare two <code>GenericByteViewArray</code> at index <code>left_idx</code> and …\nCopy the i‑th view into <code>data_buf</code> if it refers to an …\nReturns the buffers storing string data\nCreates a <code>GenericByteViewArray</code> based on an iterator of …\nReturns a “compacted” version of this array\nBuilds a 128-bit composite key for an inline value:\nReturns the first <code>len</code> bytes the inline value of the view.\nDeconstruct this array into its constituent parts\nReturns true if all data within this array is ASCII\nReturns true if all data within this array is ASCII\nConstructs a new iterator for iterating over the values of …\nCreate a new <code>GenericByteViewArray</code> from the provided parts, …\nCreate a new <code>GenericByteViewArray</code> of length <code>len</code> where all …\nCreate a new <code>Scalar</code> from <code>value</code>\nCreate a new <code>GenericByteViewArray</code> from the provided parts, …\nReturns an iterator over the first <code>prefix_len</code> bytes of …\nReturns a zero-copy slice of this array with the indicated …\nReturns an iterator over the last <code>suffix_len</code> bytes of each …\nConvert the <code>StringViewArray</code> to <code>BinaryViewArray</code>\nConvert the <code>StringViewArray</code> to <code>BinaryViewArray</code>\nConvert the <code>BinaryViewArray</code> to <code>StringViewArray</code> If items …\nConvert the <code>BinaryViewArray</code> to <code>StringViewArray</code> If items …\nConvert the <code>BinaryViewArray</code> to <code>StringViewArray</code>\nConvert the <code>BinaryViewArray</code> to <code>StringViewArray</code>\nReturns the total number of bytes used by all non inlined …\nCreate a new <code>GenericByteViewArray</code> from the provided parts, …\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code> without bounds checking\nReturns the views buffer\nA <code>DictionaryArray</code> with the key type erased\nAn array of dictionary encoded values\nA <code>DictionaryArray</code> indexed by <code>i16</code>\nA <code>DictionaryArray</code> indexed by <code>i32</code>\nA <code>DictionaryArray</code> indexed by <code>i64</code>\nA <code>DictionaryArray</code> indexed by <code>i8</code>\nA <code>DictionaryArray</code> typed on its child values array\nA <code>DictionaryArray</code> indexed by <code>u16</code>\nA <code>DictionaryArray</code> indexed by <code>u32</code>\nA <code>DictionaryArray</code> indexed by <code>u64</code>\nA <code>DictionaryArray</code> indexed by <code>u8</code>\nThe dictionary array\nDowncast this dictionary to a <code>TypedDictionaryArray</code>\nDeconstruct this array into its constituent parts\nReturns <code>PrimitiveDictionaryBuilder</code> of this dictionary …\nWhether this dictionary is empty\nCurrently exists for compatibility purposes with Arrow IPC.\nValues are ordered.\nValues are ordered.\nValues are ordered.\nValues are ordered.\nValues are ordered.\nValues are ordered.\nValues are ordered.\nValues are ordered.\nValues are ordered.\nReturn the value of <code>keys</code> (the dictionary key) at index <code>i</code>, …\nReturns the primitive keys of this dictionary as an <code>Array</code>\nReturn an array view of the keys of this dictionary as a …\nReturns the keys of this <code>TypedDictionaryArray</code>\nThe keys of this dictionary. These are constructed from the\nThe keys of this dictionary. These are constructed from the\nThe keys of this dictionary. These are constructed from the\nThe keys of this dictionary. These are constructed from the\nThe keys of this dictionary. These are constructed from the\nThe keys of this dictionary. These are constructed from the\nThe keys of this dictionary. These are constructed from the\nThe keys of this dictionary. These are constructed from the\nThe keys of this dictionary. These are constructed from the\nReturn an iterator over the keys (indexes into the …\nThe length of the dictionary is the length of the keys …\nIf <code>value</code> is present in <code>values</code> (aka the dictionary), …\nAttempt to create a new DictionaryArray with a specified …\nCreate a new <code>Scalar</code> from <code>value</code>\nCreate a new <code>DictionaryArray</code> without performing validation\nReturns the keys of this dictionary as usize\nComputes an occupancy mask for this dictionary’s values\nReturns a zero-copy slice of this array with the indicated …\nAttempt to create a new DictionaryArray with a specified …\nApplies an unary and infallible function to a mutable …\nReturns a clone of the value type of this list.\nReturns the values of this dictionary\nReturns a reference to the dictionary values array\nReturns the values of this <code>TypedDictionaryArray</code>\nArray of dictionary values (can be any DataType).\nArray of dictionary values (can be any DataType).\nArray of dictionary values (can be any DataType).\nArray of dictionary values (can be any DataType).\nArray of dictionary values (can be any DataType).\nArray of dictionary values (can be any DataType).\nArray of dictionary values (can be any DataType).\nArray of dictionary values (can be any DataType).\nArray of dictionary values (can be any DataType).\nThe values of the dictionary\nCreate a new <code>DictionaryArray</code> replacing <code>values</code> with the new …\nReturns a new dictionary with the same keys as the current …\nAn array of fixed size binary arrays\nDeconstruct this array into its constituent parts\nconstructs a new iterator\nCreate a new <code>FixedSizeBinaryArray</code> with <code>size</code> element size, …\nCreate a new <code>FixedSizeBinaryArray</code> of length <code>len</code> where all …\nCreate a new <code>Scalar</code> from <code>value</code>\nReturns a zero-copy slice of this array with the indicated …\nCreate an array from an iterable argument of byte slices.\nCreate an array from an iterable argument of sparse byte …\nCreate an array from an iterable argument of sparse byte …\nCreate a new <code>FixedSizeBinaryArray</code> from the provided parts, …\nReturns the element at index <code>i</code> as a byte slice.\nReturns the raw value data.\nReturns the length for an element.\nReturns the offset for the element at index <code>i</code>.\nReturns the element at index <code>i</code> as a byte slice.\nReturns the values of this array.\nAn array of [fixed length lists], similar to JSON arrays …\nCreates a <code>FixedSizeListArray</code> from an iterator of primitive …\nDeconstruct this array into its constituent parts\nconstructs a new iterator\nCreate a new <code>FixedSizeListArray</code> with <code>size</code> element size, …\nCreate a new <code>FixedSizeListArray</code> of length <code>len</code> where all …\nReturns a zero-copy slice of this array with the indicated …\nCreate a new <code>FixedSizeListArray</code> from the provided parts, …\nReturns ith value of this list array.\nReturns the length for an element.\nReturns the offset for value at index <code>i</code>.\nReturns a clone of the value type of this list.\nReturns a reference to the values of this list.\nThe data type constructor of list array. The input is the …\nAn array of variable length lists, similar to JSON arrays …\nTrue for 64 bit offset size and false for 32 bit offset …\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nThe max <code>usize</code> offset\nA type that can be used within a variable-size array to …\nPrefix for the offset size\nCreates a <code>GenericListArray</code> from an iterator of primitive …\nDeconstruct this array into its constituent parts\nconstructs a new iterator\nCreate a new <code>GenericListArray</code> from the provided parts\nCreate a new <code>GenericListArray</code> of length <code>len</code> where all …\nReturns a reference to the offsets of this list\nReturns a zero-copy slice of this array with the indicated …\nCreate a new <code>GenericListArray</code> from the provided parts\nReturns ith value of this list array.\nReturns the length for value at index <code>i</code>.\nReturns the offset values in the offsets buffer.\nReturns a clone of the value type of this list.\nReturns ith value of this list array.\nReturns a reference to the values of this list\nThe data type constructor of listview array. The input is …\nAn array of variable length lists, specifically in the …\nA <code>GenericListViewArray</code> of variable size lists, storing …\nA <code>GenericListViewArray</code> of variable size lists, storing …\nDeconstruct this array into its constituent parts\nConstructs a new iterator\nCreate a new <code>GenericListViewArray</code> from the provided parts\nCreate a new <code>GenericListViewArray</code> of length <code>len</code> where all …\nReturns a reference to the offsets of this list\nReturns a reference to the sizes of this list\nReturns a zero-copy slice of this array with the indicated …\nCreate a new <code>GenericListViewArray</code> from the provided parts\nReturns ith value of this list view array.\nReturns the offset for value at index <code>i</code>.\nReturns the offset values in the offsets buffer\nReturns the size for value at index <code>i</code>.\nReturns the sizes values in the offsets buffer\nReturns a clone of the value type of this list.\nReturns ith value of this list view array.\nReturns a reference to the values of this list\nAn array of key-value maps\nReturns a reference to the <code>StructArray</code> entries of this map\nThe <code>StructArray</code> that is the direct child of this array\nDeconstruct this array into its constituent parts\nconstructs a new iterator\nReturns the data type of the map’s keys.\nReturns a reference to the keys of this map\nCreate a new <code>MapArray</code> from the provided parts\nCreates map array from provided keys, values and …\nReturns a reference to the offsets of this map\nReturns a zero-copy slice of this array with the indicated …\nCreate a new <code>MapArray</code> from the provided parts\nReturns ith value of this map array.\nReturns the length for value at index <code>i</code>.\nReturns the offset values in the offsets buffer\nThe start and end offsets of each entry\nReturns the data type of the map’s values.\nReturns ith value of this map array.\nReturns a reference to the values of this map\nAn array of null values\nReturns a new null array builder\nCreate a new <code>NullArray</code> of the specified length\nReturns a zero-copy slice of this array with the indicated …\nA <code>PrimitiveArray</code> of days since UNIX epoch stored as <code>i32</code>\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of 128-bit fixed point decimals\nA <code>PrimitiveArray</code> of 256-bit fixed point decimals\nA <code>PrimitiveArray</code> of 32-bit fixed point decimals\nA <code>PrimitiveArray</code> of 64-bit fixed point decimals\nA <code>PrimitiveArray</code> of elapsed durations in microseconds\nA <code>PrimitiveArray</code> of elapsed durations in milliseconds\nA <code>PrimitiveArray</code> of elapsed durations in nanoseconds\nA <code>PrimitiveArray</code> of elapsed durations in seconds\nA <code>PrimitiveArray</code> of <code>f16</code>\nA <code>PrimitiveArray</code> of <code>f32</code>\nA <code>PrimitiveArray</code> of <code>f64</code>\nA <code>PrimitiveArray</code> of <code>i16</code>\nA <code>PrimitiveArray</code> of <code>i32</code>\nA <code>PrimitiveArray</code> of <code>i64</code>\nA <code>PrimitiveArray</code> of <code>i8</code>\nA <code>PrimitiveArray</code> of “calendar” intervals in days and …\nA <code>PrimitiveArray</code> of “calendar” intervals in  months, …\nA <code>PrimitiveArray</code> of “calendar” intervals in whole …\nAn optional primitive value\nAn array of primitive values, of type <code>ArrowPrimitiveType</code>\nA <code>PrimitiveArray</code> of milliseconds since midnight stored as …\nA <code>PrimitiveArray</code> of seconds since midnight stored as <code>i32</code>\nA <code>PrimitiveArray</code> of microseconds since midnight stored as …\nA <code>PrimitiveArray</code> of nanoseconds since midnight stored as …\nA <code>PrimitiveArray</code> of microseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of nanoseconds since UNIX epoch stored as …\nA <code>PrimitiveArray</code> of seconds since UNIX epoch stored as <code>i64</code>\nA <code>PrimitiveArray</code> of <code>u16</code>\nA <code>PrimitiveArray</code> of <code>u32</code>\nA <code>PrimitiveArray</code> of <code>u64</code>\nA <code>PrimitiveArray</code> of <code>u8</code>\nAsserts that <code>data_type</code> is compatible with <code>Self</code>\nReturns a new primitive array builder\nCreates a PrimitiveArray based on an iterator of values …\nCreates a PrimitiveArray based on an iterator of values …\nCreates a <code>PrimitiveArray</code> from an iterator of trusted …\nApplies a unary infallible function to each value in an …\nCreates a PrimitiveArray based on a constant value with …\nReturns a <code>PrimitiveBuilder</code> for this array, suitable for …\nDeconstruct this array into its constituent parts\nReturns if this <code>PrimitiveArray</code> is compatible with the …\nReturns whether this array is empty.\nconstructs a new iterator\nReturns the length of this array.\nCorresponding Rust native type if available\nCreate a new <code>PrimitiveArray</code> from the provided values and …\nCreate a new <code>PrimitiveArray</code> of the given length where all …\nCreate a new <code>Scalar</code> from <code>value</code>\nValidates the Decimal Array, if the value of slot is …\nReturns the decimal precision of this array\nReinterprets this array’s contents as a different data …\nReturns the decimal scale of this array\nReturns a zero-copy slice of this array with the indicated …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns the timezone of this array if any\nCreate a new <code>PrimitiveArray</code> from the provided values and …\nApplies a unary fallible function to all valid values in a …\nApplies a unary fallible function to all valid values in a …\nApplies a unary infallible function to a primitive array, …\nApplies a unary and infallible function to the array in …\nApplies a unary and nullable function to all valid values …\nValidates values in this array can be properly interpreted …\nReturns the primitive value at index <code>i</code>.\nReturns value as a chrono <code>NaiveDate</code> by using …\nReturns value as a chrono <code>NaiveDateTime</code>, handling time …\nReturns value as a chrono <code>NaiveDateTime</code>, handling time …\nReturns a value as a chrono <code>Duration</code>\nReturns <code>Self::value</code> formatted as a string\nReturns a value as a chrono <code>NaiveTime</code>\nReturns the primitive value at index <code>i</code>.\nReturns the values of this array\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nValues data\nOverrides the <code>DataType</code> of this <code>PrimitiveArray</code>\nReturns a Decimal array with the same data as self, with …\nConstruct a timestamp array with new timezone\nConstruct a timestamp array with an optional timezone\nConstruct a timestamp array with UTC\nA <code>RunArray</code> with <code>i16</code> run ends\nA <code>RunArray</code> with <code>i32</code> run ends\nA <code>RunArray</code> with <code>i64</code> run ends\nAn array of run-end encoded values\nA <code>RunArray</code> typed typed on its child values array\nDowncast this <code>RunArray</code> to a <code>TypedRunArray</code>\nReturns the physical index at which the array slice ends.\nReturns index to the physical array for the given index to …\nReturns the physical indices of the input logical indices. …\nReturns the physical index at which the array slice starts.\nCalculates the logical length of the array encoded by the …\nReturns the run array of this <code>TypedRunArray</code>\nThe run array\nReturns a reference to <code>RunEndBuffer</code>\nReturns the run_ends of this <code>TypedRunArray</code>\nReturns a zero-copy slice of this array with the indicated …\nAttempts to create RunArray using given run_ends (index …\nReturns a reference to values array\nReturns the values of this <code>TypedRunArray</code>\nThe values of the run_array\nA <code>GenericByteArray</code> for storing <code>str</code>\nA <code>GenericStringArray</code> of <code>str</code> using <code>i64</code> offsets\nA <code>GenericStringArray</code> of <code>str</code> using <code>i32</code> offsets\nReturns the number of <code>Unicode Scalar Value</code> in the string …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nFallibly creates a <code>GenericStringArray</code> from a …\nAn array of structs\nReturns the field at <code>pos</code>.\nReturn child array whose field name equals to column_name\nReturn field names in this struct array\nReturns the fields of the struct array\nReturns the <code>Fields</code> of this <code>StructArray</code>\nDeconstruct this array into its constituent parts\nCreate a new <code>StructArray</code> from the provided parts, …\nCreate a new <code>StructArray</code> containing no fields\nCreate a new <code>StructArray</code> of length <code>len</code> where all values …\nCreate a new <code>StructArray</code> from the provided parts without …\nCreate a new <code>StructArray</code> from the provided parts without …\nReturn the number of fields in this struct array\nReturns a zero-copy slice of this array with the indicated …\nCreate a new <code>StructArray</code> from the provided parts, …\nCreate a new <code>StructArray</code> from the provided parts, …\nGather individual bits from the null buffer of the …\nAll fields contains nulls, so we can skip the selection …\nSkip the selection mask computation of the fully nulls …\nSkip the selection mask computation of the fields without …\nHow to compute the logical nulls of a sparse union. All …\nAn array of values of varying types\nAccesses the child array for <code>type_id</code>.\nReturns a vector of tuples containing each field’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes the logical nulls for a sparse or dense union, by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstruct this array into its constituent parts\nReturns whether the <code>UnionArray</code> is dense (or sparse if <code>false</code>…\nComputes the logical nulls for a sparse union, optimized …\nMaps <code>nulls</code> to <code>BitChunk&#39;s</code> and then to <code>BitChunkIterator&#39;s</code>, …\nComputes the logical nulls for a sparse union, optimized …\nComputes the logical nulls for a sparse union, optimized …\nCreates a new <code>UnionArray</code>.\nReturns the <code>offsets</code> buffer if this is a dense array\nReturns a zero-copy slice of this array with the indicated …\nAttempts to create a new <code>UnionArray</code>, validating the inputs …\nReturns the <code>type_id</code> for the array slot at <code>index</code>.\nReturns the <code>type_ids</code> buffer for this array\nReturns the names of the types in the union.\nReturns the array’s value at index <code>i</code>.\nReturns the offset into the underlying values array for …\nReturns a bitmask where bits indicate if any id from …\nTrait for dealing with different array builders at runtime\nBuilder for <code>BinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>BinaryArray</code>\nBuilder for <code>RunArray</code> of <code>BinaryArray</code>\nArray builder for <code>BinaryViewArray</code>\nBuilder for <code>BooleanBuffer</code>\nBuilder for <code>BooleanArray</code>\nBuilder for creating a Buffer object.\nBuffer builder for 32-bit date type.\nA 32-bit date array builder.\nBuffer builder for 64-bit date type.\nA 64-bit date array builder.\nBuffer builder for 128-bit decimal type.\nA decimal 128 array builder\nBuffer builder for 256-bit decimal type.\nA decimal 256 array builder\nBuffer builder for 32-bit decimal type.\nA decimal 32 array builder\nBuffer builder for 64-bit decimal type.\nA decimal 64 array builder\nBuffer builder for elaspsed time of microseconds unit.\nAn elapsed time in microseconds array builder.\nBuffer builder for elaspsed time of milliseconds unit.\nAn elapsed time in milliseconds array builder.\nBuffer builder for elaspsed time of nanoseconds unit.\nAn elapsed time in nanoseconds array builder.\nBuffer builder for elaspsed time of second unit.\nAn elapsed time in seconds array builder.\nBuilder for <code>FixedSizeBinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>FixedSizeBinaryArray</code>\nBuilder for <code>FixedSizeListArray</code>\nBuffer builder for 16-bit floating point type.\nA 16-bit floating point array builder.\nBuffer builder for 32-bit floating point type.\nA 32-bit floating point array builder.\nBuffer builder for 64-bit floating point type.\nA 64-bit floating point array builder.\nArray builder for <code>GenericBinaryArray</code>\nBuilder for <code>GenericByteArray</code>\nBuilder for <code>DictionaryArray</code> of <code>GenericByteArray</code>\nBuilder for <code>RunArray</code> of <code>GenericByteArray</code>\nA builder for <code>GenericByteViewArray</code>\nBuilder for <code>GenericListArray</code>\nBuilder for <code>GenericListViewArray</code>\nArray builder for <code>GenericStringArray</code>\nBuffer builder for signed 16-bit integer type.\nA signed 16-bit integer array builder.\nBuffer builder for signed 32-bit integer type.\nA signed 32-bit integer array builder.\nBuffer builder for signed 64-bit integer type.\nA signed 64-bit integer array builder.\nBuffer builder for signed 8-bit integer type.\nA signed 8-bit integer array builder.\nBuffer builder for “calendar” interval in days and …\nA “calendar” interval in days and milliseconds array …\nBuffer builder “calendar” interval in months, days, …\nA “calendar” interval in months, days, and nanoseconds …\nBuffer builder for “calendar” interval in months.\nA “calendar” interval in months array builder.\nBuilder for <code>LargeBinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>RunArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>LargeListArray</code>\nBuilder for <code>LargeListViewArray</code>\nBuilder for <code>LargeStringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeStringArray</code>\nBuilder for <code>RunArray</code> of <code>LargeStringArray</code>\nBuilder for <code>ListArray</code>\nBuilder for <code>ListViewArray</code>\nBuilder for <code>MapArray</code>\nThe <code>Field</code> names for a <code>MapArray</code>\nBuilder for creating <code>NullBuffer</code>\nBuilder for <code>NullArray</code>\nBuilder of <code>OffsetBuffer</code>\nBuilder for <code>PrimitiveArray</code>\nBuilder for <code>DictionaryArray</code> of <code>PrimitiveArray</code>\nBuilder for <code>RunArray</code> of <code>PrimitiveArray</code>\nBuilder for <code>StringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>StringArray</code>\nBuilder for <code>RunArray</code> of <code>StringArray</code>\nArray builder for <code>StringViewArray</code>\nBuilder for <code>StructArray</code>\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in milliseconds array builder.\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in seconds array builder.\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in microseconds array builder.\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in nanoseconds array builder.\nBuffer builder for timestamp type of microsecond unit.\nA timestamp microsecond array builder.\nBuffer builder for timestamp type of millisecond unit.\nA timestamp millisecond array builder.\nBuffer builder for timestamp type of nanosecond unit.\nA timestamp nanosecond array builder.\nBuffer builder for timestamp type of second unit.\nA timestamp second array builder.\nBuffer builder for usigned 16-bit integer type.\nAn usigned 16-bit integer array builder.\nBuffer builder for usigned 32-bit integer type.\nAn usigned 32-bit integer array builder.\nBuffer builder for usigned 64-bit integer type.\nAn usigned 64-bit integer array builder.\nBuffer builder for usigned 8-bit integer type.\nAn usigned 8-bit integer array builder.\nBuilder for <code>UnionArray</code>\nAdvances the buffer by <code>additional</code> bits\nIncreases the number of elements in the internal buffer by …\nReturn the allocated size of this builder, in bytes, …\nAppends a boolean <code>v</code> into the buffer\nAppends a boolean value into the builder.\nAppends a value of type <code>T</code> into the builder, growing the …\nAppend <code>BooleanBuffer</code> to this <code>BooleanBufferBuilder</code>\nAppend <code>NullBuffer</code> to this <code>NullBufferBuilder</code>\nAppends n <code>additional</code> bits of value <code>v</code> into the buffer\nAppends a value of type <code>T</code> into the builder N times, …\nAppends <code>n</code> <code>true</code>s into the builder to indicate that these <code>n</code> …\nAppends <code>n</code> <code>false</code>s into the builder to indicate that these <code>n</code> …\nAppends <code>n</code>, zero-initialized values\nAppends a <code>true</code> into the builder to indicate that this item …\nAppends a <code>false</code> into the builder to indicate that this …\nAppend <code>range</code> bits from <code>to_set</code>\nAppends a slice of booleans into the buffer\nAppends a boolean slice into the builder to indicate the …\nAppends a slice of type <code>T</code>, growing the internal buffer as …\nSafety\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as an non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as an non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as an non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as an mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as an mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as an mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the packed bits\nReturns the inner bitmap builder as slice\nView the contents of this buffer as a slice\nReturns the packed bits\nReturn a mutable reference to the inner bitmap slice.\nView the contents of this buffer as a mutable slice\nReturns the capacity of the buffer, in bits (not bytes)\nReturns the actual capacity (number of elements) of the …\n<code>Field</code> name for map entries\nMaps field names to <code>FieldData</code> instances which track the …\nBuilds the array\nCreates a <code>BooleanBuffer</code>\nBuilds the null buffer and resets the builder. Returns <code>None</code>…\nTakes the builder itself and returns an <code>OffsetBuffer</code>\nResets this builder and returns an immutable Buffer.\nBuilds the array and reset this builder.\nBuilds the array.\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array without resetting the underlying builder.\nBuilds the BooleanBuffer without resetting the builder.\nBuilds the NullBuffer without resetting the builder.\nBuilds the OffsetBuffer without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a bit in the buffer at <code>index</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns true if empty\nCheck if the builder is empty.\nReturns whether the internal buffer is empty.\nReturns whether number of array slots is zero\nGets a bit in the buffer at <code>index</code>\n<code>Field</code> name for map key\nReturns the number of array slots in the builder\nReturns the length of the buffer\nReturn the number of bits in the buffer.\nReturns the current number of array elements in the …\nReturns the number of binary slots in the builder\nReturns the number of array slots in the builder.\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the length of logical array encoded by the …\nReturns the number of array slots in the builder\nReturns the length of logical array encoded by the …\nReturns the number of array slots in the builder\nThe current number of slots in the array\nReturns a builder with capacity for <code>capacity</code> elements of …\nCreate a view based on the given data, block id and offset.\nCreates a new <code>BooleanBufferBuilder</code> with sufficient space …\nCreates a new empty builder.\nCreate a new builder with space for <code>capacity + 1</code> offsets\nCreates a new builder with initial capacity for <em>at least</em> …\nCreates a new <code>BooleanBufferBuilder</code> from <code>MutableBuffer</code> of …\nCreates a new builder from a <code>MutableBuffer</code>.\nCreates a new builder from a <code>MutableBuffer</code>\nCreates a new builder with given length.\nPush a slice of <code>length</code> bytes\nReserve space to at least <code>additional</code> new bits. Capacity …\nReserve space for at least <code>additional</code> further offsets\nReserves memory for <em>at least</em> <code>n</code> more elements of type <code>T</code>.\nResizes the buffer, either truncating its contents (with …\nSets a bit in the buffer at <code>index</code>\nSome if deduplicating strings map …\nSome if deduplicating strings map …\nSome if deduplicating strings map …\nTruncates the builder to the given length\nTruncates the builder to the given length\nShorten this BufferBuilder to <code>len</code> items\nBuilder to keep track of type ids\n<code>Field</code> name for map value\nBuilder to keep track of offsets (<code>None</code> for sparse unions)\nBuilder for <code>BooleanArray</code>\nAppends array values and null to this builder as is (this …\nAppends n <code>additional</code> bits of value <code>v</code> into the buffer\nAppends a null slot into the builder\nAppends <code>n</code> <code>null</code>s into the builder.\nAppends an <code>Option&lt;T&gt;</code> into the builder\nAppends a slice of type <code>T</code> into the builder\nAppends a value of type <code>T</code> into the builder\nAppends values from a slice of type <code>T</code> and a validity …\nReturns the capacity of this builder measured in slots of …\nBuilds the BooleanArray and reset this builder.\nBuilds the BooleanArray without resetting the builder.\nCreates a new boolean builder\nReturns the current null buffer as a slice\nReturns the current values buffer as a slice\nCreates a new boolean builder with space for <code>capacity</code> …\nBuilder for creating a Buffer object.\nBuffer builder for 32-bit date type.\nBuffer builder for 64-bit date type.\nBuffer builder for 128-bit decimal type.\nBuffer builder for 256-bit decimal type.\nBuffer builder for 32-bit decimal type.\nBuffer builder for 64-bit decimal type.\nBuffer builder for elaspsed time of microseconds unit.\nBuffer builder for elaspsed time of milliseconds unit.\nBuffer builder for elaspsed time of nanoseconds unit.\nBuffer builder for elaspsed time of second unit.\nBuffer builder for 16-bit floating point type.\nBuffer builder for 32-bit floating point type.\nBuffer builder for 64-bit floating point type.\nBuffer builder for signed 16-bit integer type.\nBuffer builder for signed 32-bit integer type.\nBuffer builder for signed 64-bit integer type.\nBuffer builder for signed 8-bit integer type.\nBuffer builder for “calendar” interval in days and …\nBuffer builder “calendar” interval in months, days, …\nBuffer builder for “calendar” interval in months.\nBuilder of <code>OffsetBuffer</code>\nBuffer builder for 32-bit elaspsed time since midnight of …\nBuffer builder for 32-bit elaspsed time since midnight of …\nBuffer builder for 64-bit elaspsed time since midnight of …\nBuffer builder for 64-bit elaspsed time since midnight of …\nBuffer builder for timestamp type of microsecond unit.\nBuffer builder for timestamp type of millisecond unit.\nBuffer builder for timestamp type of nanosecond unit.\nBuffer builder for timestamp type of second unit.\nBuffer builder for usigned 16-bit integer type.\nBuffer builder for usigned 32-bit integer type.\nBuffer builder for usigned 64-bit integer type.\nBuffer builder for usigned 8-bit integer type.\nBuilder for <code>FixedSizeBinaryArray</code>\nAppend a null value to the array.\nAppends <code>n</code> <code>null</code>s into the builder.\nAppends a byte slice into the builder.\nBuilds the <code>FixedSizeBinaryArray</code> and reset this builder.\nBuilds the <code>FixedSizeBinaryArray</code> without resetting the …\nCreates a new <code>FixedSizeBinaryBuilder</code>\nReturns the current null buffer as a slice\nReturns the current values buffer as a slice\nCreates a new <code>FixedSizeBinaryBuilder</code>, <code>capacity</code> is the …\nBuilder for <code>DictionaryArray</code> of <code>FixedSizeBinaryArray</code>\nAppend a value to the array. Return an existing index if …\nAppends a null slot into the builder\nAppends <code>n</code> <code>null</code>s into the builder.\nInfallibly append a value to this builder\nBuilds the <code>DictionaryArray</code> and reset this builder.\nBuilds the <code>DictionaryArray</code> without resetting the builder.\nBuilds the <code>DictionaryArray</code> without resetting the values …\nCreates a new <code>FixedSizeBinaryDictionaryBuilder</code>\nCreates a new <code>FixedSizeBinaryDictionaryBuilder</code> from the …\nCreates a new <code>FixedSizeBinaryDictionaryBuilder</code> with the …\nBuilder for <code>FixedSizeListArray</code>\nFinish the current fixed-length list array slot\nBuilds the <code>FixedSizeListBuilder</code> and reset this builder.\nBuilds the <code>FixedSizeListBuilder</code> without resetting the …\nCreates a new <code>FixedSizeListBuilder</code> from a given values …\nReturns the current null buffer as a slice\nReturns the length of the list\nReturns the child array builder as a mutable reference.\nCreates a new <code>FixedSizeListBuilder</code> from a given values …\nOverride the field passed to <code>FixedSizeListArray::new</code>\nBuilder for <code>RunArray</code> of <code>BinaryArray</code>\nBuilder for <code>RunArray</code> of <code>GenericByteArray</code>\nBuilder for <code>RunArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>RunArray</code> of <code>LargeStringArray</code>\nBuilder for <code>RunArray</code> of <code>StringArray</code>\nAppends null to the logical array encoded by the RunArray.\nAppends optional value to the logical array encoded by the …\nAppends value to the logical array encoded by the RunArray.\nCreates the RunArray and resets the builder. Panics if …\nCreates the RunArray and without resetting the builder. …\nCreates a new <code>GenericByteRunBuilder</code>\nCreates a new <code>GenericByteRunBuilder</code> with the provided …\nArray builder for <code>GenericBinaryArray</code>\nBuilder for <code>GenericByteArray</code>\nArray builder for <code>GenericStringArray</code>\nAppends array values and null to this builder as is (this …\nAppend a null value into the builder.\nAppends <code>n</code> <code>null</code>s into the builder.\nAppend an <code>Option</code> value into the builder.\nAppends a value into the builder.\nBuilds the <code>GenericByteArray</code> and reset this builder.\nBuilds the <code>GenericByteArray</code> without resetting the builder.\nCreates a new <code>GenericByteBuilder</code>.\nCreates a new  <code>GenericByteBuilder</code> from buffers.\nReturns the current offsets buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a mutable slice\nReturns the current values buffer as a slice\nCreates a new <code>GenericByteBuilder</code>.\nBuilder for <code>DictionaryArray</code> of <code>BinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>GenericByteArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeStringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>StringArray</code>\nAppend a value to the array. Return an existing index if …\nAppend a value multiple times to the array. This is the …\nAppends a null slot into the builder\nInfallibly append <code>n</code> null slots into the builder\nAppend an <code>Option</code> value into the builder\nAppend an <code>Option</code> value into the builder repeatedly <code>count</code> …\nInfallibly append a value to this builder\nInfallibly append a value to this builder repeatedly <code>count</code> …\nExtends builder with an existing dictionary array.\nBuilds the <code>DictionaryArray</code> and reset this builder.\nBuilds the <code>DictionaryArray</code> without resetting the builder.\nBuilds the <code>DictionaryArray</code> without resetting the values …\nCreates a new <code>GenericByteDictionaryBuilder</code>\nCreates a new <code>GenericByteDictionaryBuilder</code> from a keys …\nCreates a new <code>GenericByteDictionaryBuilder</code> from the …\nReturns the current null buffer as a slice\nCreates a new <code>GenericByteDictionaryBuilder</code> with the …\nArray builder for <code>BinaryViewArray</code>\nA builder for <code>GenericByteViewArray</code>\nArray builder for <code>StringViewArray</code>\nReturn the allocated size of this builder in bytes, useful …\nAppends an array to the builder. This will flush any …\nAppend a new data block returning the new block offset\nAppend a null value into the builder\nAppend an <code>Option</code> value into the builder\nAppends a value into the builder\nAppend a view of the given <code>block</code>, <code>offset</code> and <code>length</code>\nBuilds the <code>GenericByteViewArray</code> and reset this builder\nBuilds the <code>GenericByteViewArray</code> without resetting the …\nFlushes the in progress block if any\nReturns the argument unchanged.\nReturns the value at the given index Useful if we want to …\nCalls <code>U::from(self)</code>.\nCreates a view from a fixed length input (the compiler can …\nCreate a view based on the given data, block id and offset.\nCreates a new <code>GenericByteViewBuilder</code>.\nAppend a block to <code>self.completed</code>, checking for overflow\nSome if deduplicating strings map …\nSome if deduplicating strings map …\nSome if deduplicating strings map …\nTry to append a view of the given <code>block</code>, <code>offset</code> and <code>length</code>\nReturns the current null buffer as a slice\nCreates a new <code>GenericByteViewBuilder</code> with space for …\nDeduplicate strings while building the array\nSet a fixed buffer size for variable length strings\nBuilder for <code>GenericListArray</code>\nFinish the current variable-length list array slot\nAppend a null to this <code>GenericListBuilder</code>\nAppends <code>n</code> <code>null</code>s into the builder.\nAppends an optional value into this <code>GenericListBuilder</code>\nAppend a value to this <code>GenericListBuilder</code>\nBuilds the <code>GenericListArray</code> and reset this builder.\nBuilds the <code>GenericListArray</code> without resetting the builder.\nCreates a new <code>GenericListBuilder</code> from a given values array …\nReturns the next offset\nReturns the current offsets buffer as a slice\nReturns the current null buffer as a slice\nReturns the child array builder as a mutable reference.\nReturns the child array builder as an immutable reference\nCreates a new <code>GenericListBuilder</code> from a given values array …\nOverride the field passed to <code>GenericListArray::new</code>\nBuilder for <code>GenericListViewArray</code>\nFinish the current variable-length list array slot\nAppend a null to this <code>GenericListViewBuilder</code>\nAppends an optional value into this <code>GenericListViewBuilder</code>\nAppend value into this <code>GenericListViewBuilder</code>\nBuilds the <code>GenericListViewArray</code> and reset this builder.\nBuilds the <code>GenericListViewArray</code> without resetting the …\nCreates a new <code>GenericListViewBuilder</code> from a given values …\nReturns the current offsets buffer as a slice\nReturns the child array builder as a mutable reference.\nReturns the child array builder as an immutable reference\nCreates a new <code>GenericListViewBuilder</code> from a given values …\nBy default a nullable field is created with the name <code>item</code>\nBuilder for <code>MapArray</code>\nThe <code>Field</code> names for a <code>MapArray</code>\nFinish the current map array slot\nReturns both the key and value array builders of the map\n<code>Field</code> name for map entries\nBuilds the <code>MapArray</code>\nBuilds the <code>MapArray</code> without resetting the builder.\n<code>Field</code> name for map key\nReturns the key array builder of the map\nCreates a new <code>MapBuilder</code>\nReturns the current null buffer as a slice\n<code>Field</code> name for map value\nReturns the value array builder of the map\nCreates a new <code>MapBuilder</code> with capacity\nOverride the field passed to <code>MapBuilder::new</code>\nOverride the field passed to <code>MapBuilder::new</code>\nBuilder for <code>NullArray</code>\nAppends a null slot into the builder\nAppends <code>n</code> <code>null</code>s into the builder.\nAppends a null slot into the builder\nAppends <code>n</code> <code>null</code>s into the builder.\nBuilds the NullArray and reset this builder.\nBuilds the NullArray without resetting the builder.\nCreates a new null builder\nA 32-bit date array builder.\nA 64-bit date array builder.\nA decimal 128 array builder\nA decimal 256 array builder\nA decimal 32 array builder\nA decimal 64 array builder\nAn elapsed time in microseconds array builder.\nAn elapsed time in milliseconds array builder.\nAn elapsed time in nanoseconds array builder.\nAn elapsed time in seconds array builder.\nA 16-bit floating point array builder.\nA 32-bit floating point array builder.\nA 64-bit floating point array builder.\nA signed 16-bit integer array builder.\nA signed 32-bit integer array builder.\nA signed 64-bit integer array builder.\nA signed 8-bit integer array builder.\nA “calendar” interval in days and milliseconds array …\nA “calendar” interval in months, days, and nanoseconds …\nA “calendar” interval in months array builder.\nBuilder for <code>PrimitiveArray</code>\nA 32-bit elaspsed time in milliseconds array builder.\nA 32-bit elaspsed time in seconds array builder.\nA 64-bit elaspsed time in microseconds array builder.\nA 64-bit elaspsed time in nanoseconds array builder.\nA timestamp microsecond array builder.\nA timestamp millisecond array builder.\nA timestamp nanosecond array builder.\nA timestamp second array builder.\nAn usigned 16-bit integer array builder.\nAn usigned 32-bit integer array builder.\nAn usigned 64-bit integer array builder.\nAn usigned 8-bit integer array builder.\nAppends array values and null to this builder as is (this …\nAppends a null slot into the builder\nAppends <code>n</code> no. of null’s into the builder\nAppends an <code>Option&lt;T&gt;</code> into the builder\nAppends a slice of type <code>T</code> into the builder\nAppends values from a trusted length iterator.\nAppends a value of type <code>T</code> into the builder\nAppends a value of type <code>T</code> into the builder <code>n</code> times\nAppends values from a slice of type <code>T</code> and a validity …\nReturns the capacity of this builder measured in slots of …\nBuilds the <code>PrimitiveArray</code> and reset this builder.\nBuilds the <code>PrimitiveArray</code> without resetting the builder.\nCreates a new primitive array builder\nCreates a new primitive array builder from buffers\nReturns the current values buffer and null buffer as a …\nReturns the current null buffer as a slice\nReturns the current null buffer as a mutable slice\nReturns the current values buffer as a slice\nReturns the current values buffer as a mutable slice\nCreates a new primitive array builder with capacity no of …\nBy default <code>PrimitiveBuilder</code> uses …\nSets the precision and scale\nSets the timezone\nSets an optional timezone\nBuilder for <code>DictionaryArray</code> of <code>PrimitiveArray</code>\nWraps a type implementing <code>ToByteSlice</code> implementing <code>Hash</code> …\nAppend a primitive value to the array. Return an existing …\nAppend a value multiple times to the array. This is the …\nAppends a null slot into the builder\nAppend <code>n</code> null slots into the builder\nAppend an <code>Option</code> value into the builder\nAppend an <code>Option</code> value into the builder repeatedly <code>count</code> …\nInfallibly append a value to this builder\nInfallibly append a value to this builder repeatedly <code>count</code> …\nExtends builder with dictionary\nBuilds the <code>DictionaryArray</code> and reset this builder.\nBuilds the <code>DictionaryArray</code> without resetting the builder.\nBuilds the <code>DictionaryArray</code> without resetting the values …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>PrimitiveDictionaryBuilder</code>.\nCreates a new <code>PrimitiveDictionaryBuilder</code> from existing …\nCreates a new <code>PrimitiveDictionaryBuilder</code> from the provided …\nCreates a new <code>PrimitiveDictionaryBuilder</code> from the existing …\nReturns the current null buffer as a slice\nReturns the current dictionary values buffer as a slice\nReturns the current dictionary values buffer as a mutable …\nCreates a new <code>PrimitiveDictionaryBuilder</code> with the provided …\nBuilder for <code>RunArray</code> of <code>PrimitiveArray</code>\nAppends null to the logical array encoded by the run-ends …\nAppends optional value to the logical array encoded by the …\nAppends value to the logical array encoded by the run-ends …\nCreates the RunArray and resets the builder. Panics if …\nCreates the RunArray and without resetting the builder. …\nCreates a new <code>PrimitiveRunBuilder</code>\nCreates a new <code>PrimitiveRunBuilder</code> with the provided …\nBuilder for <code>StructArray</code>\nAppends an element (either null or non-null) to the …\nAppends a null element to the struct.\nAppends <code>n</code> <code>null</code>s into the builder.\nReturns a mutable reference to the child field builder at …\nReturns a reference to field builders\nReturns a mutable reference to field builders\nBuilds the <code>StructArray</code> and reset this builder.\nBuilds the <code>StructArray</code> without resetting the builder.\nCreates a new <code>StructBuilder</code> from <code>Fields</code> and <code>capacity</code>\nCreates a new <code>StructBuilder</code>\nReturns the number of fields for the struct this builder …\nConstructs and validates contents in the builder to ensure …\nReturns the current null buffer as a slice\n<code>FieldData</code> is a helper struct to track the state of the …\nA type-erased <code>BufferBuilder</code> used by <code>FieldData</code>\nBuilder for <code>UnionArray</code>\nAppends a value to this builder.\nAppends a null to this <code>FieldData</code>.\nAppends a null to this builder, encoding the null in the …\nAppends a single value to this <code>FieldData</code>’s <code>values_buffer</code>.\nBuilds this builder creating a new <code>UnionArray</code>.\nThe Arrow data type represented in the <code>values_buffer</code>, …\nMaps field names to <code>FieldData</code> instances which track the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe current number of slots in the array\nCreates a new <code>FieldData</code>.\nCreates a new dense array builder.\nCreates a new sparse array builder.\nA builder for the null bitmap\nThe number of array slots represented by the buffer\nThe type id for this field\nBuilder to keep track of type ids\nBuilder to keep track of offsets (<code>None</code> for sparse unions)\nA buffer containing the values for this field in raw bytes\nCreates a new dense array builder with capacity.\nCreates a new sparse array builder  with capacity.\nAn extension trait for <code>dyn Array</code> that provides ergonomic …\nDowncasts this to a <code>AnyDictionaryArray</code> panicking if not …\nDowncasts this to a <code>AnyDictionaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericBinaryArray</code> panicking if not …\nDowncast this to a <code>GenericBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>BinaryViewArray</code> panicking if not …\nDowncast this to a <code>BinaryViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>BooleanArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>BooleanArray</code> returning <code>None</code> if not …\nDowncast this to a <code>GenericByteViewArray</code> panicking if not …\nDowncast this to a <code>GenericByteViewArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericByteArray</code> panicking if not …\nDowncast this to a <code>GenericByteArray</code> returning <code>None</code> if not …\nDowncast this to a <code>DictionaryArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>DictionaryArray</code> returning <code>None</code> if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> panicking if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>FixedSizeListArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>FixedSizeListArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> returning <code>None</code> if not …\nDowncast this to a <code>GenericListViewArray</code> panicking if not …\nDowncast this to a <code>GenericListViewArray</code> returning <code>None</code> if …\nDowncast this to a <code>MapArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to <code>MapArray</code>…\nDowncast this to a <code>MapArray</code> returning <code>None</code> if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>PrimitiveArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code>, to …\nDowncast this to a <code>PrimitiveArray</code> returning <code>None</code> if not …\nDowncast this to a <code>RunArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>RunArray</code> returning <code>None</code> if not possible\nDowncast this to a <code>GenericStringArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericStringArray</code> returning <code>None</code> if …\nDowncast this to a <code>StringViewArray</code> panicking if not …\nDowncast this to a <code>StringViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>StructArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>StructArray</code> returning <code>None</code> if not …\nDowncast this to a <code>UnionArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>UnionArray</code> returning <code>None</code> if not …\nDowncasts a <code>dyn Array</code> to a concrete type\nAdd the given number of days to the given datetime.\nAdd the given number of months to the given datetime.\nShift a date by the given number of months.\nSubstract the given number of days to the given datetime.\nSubstract the given number of months to the given datetime.\nContains the error value\nABI-compatible struct for ArrowArray from C Data Interface …\nABI-compatible struct for <code>ArrowSchema</code> from C Data Interface\nContains the success value\nReturns the buffer at the provided index\nReturns the length, in bytes, of the buffer <code>i</code> (indexed …\nreturns all buffers, as organized by Rust (i.e. null …\nReturns the child at the provided index\nReturns the child of this schema at <code>index</code>.\nReturns an iterator to the schema’s children.\nreturns a new buffer corresponding to the index <code>i</code> of the …\nReturns the dictionary if any\nReturns the reference to the underlying dictionary of the …\nFor dictionary-encoded types, returns whether the ordering …\ncreate an empty <code>FFI_ArrowArray</code>, which can be used to …\nCreate an empty <code>FFI_ArrowSchema</code>\nExports an array to raw pointers of the C Data Interface …\nReturns the flags of this schema.\nReturns the format of this schema.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImport ArrayData from the C Data Interface\nImport ArrayData from the C Data Interface\nTakes ownership of the pointed to <code>FFI_ArrowArray</code>\nTakes ownership of the pointed to <code>FFI_ArrowSchema</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhether the array is empty\nWhether the array has been released\nthe length of the array\nFor map types, returns whether the keys within each map …\nReturns the metadata in the schema as <code>Key-Value</code> pairs\nReturns the name of this schema.\ncreates a new <code>FFI_ArrowArray</code> from existing data.\nreturns the null bit buffer. Rust implementation uses a …\nthe null count of the array\nReturns the null count, checking for validity\nReturns if the field is semantically nullable, regardless …\nReturns the number of buffers\nReturns the number of children\nthe offset of the array\nSet the null count of the array\nExport to the C Data Interface\nSee CDataInterface docs\ncreate a new <code>FFI_ArrowSchema</code>. This fails if the fields’ …\nSet the flags of the schema\nAdd metadata to the schema\nSet the name of the schema\nA <code>RecordBatchReader</code> which imports Arrays from …\nContains the error value\nABI-compatible struct for <code>ArrayStream</code> from C Stream …\nContains the success value\nCreates a new empty FFI_ArrowArrayStream. Used to import …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes ownership of the pointed to <code>FFI_ArrowArrayStream</code>\nCreates a new <code>ArrowArrayStreamReader</code> from a raw pointer of …\nC function to get the error from last operation on the …\nC function to get next array from the stream\nC function to get schema from the stream\nGet the last error from <code>ArrowArrayStreamReader</code>\nGets schema from a raw pointer of <code>FFI_ArrowArrayStream</code>. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FFI_ArrowArrayStream</code>.\nPrivate data used by the stream\nC function to release the stream\nCreates a new <code>ArrowArrayStreamReader</code> from a …\nAn iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncreate a new iterator\nA subtype of primitive type that represents numeric values.\nA two-dimensional batch of column-oriented data with a …\nGeneric implementation of RecordBatchReader that wraps an …\nOptions that control the behaviour used when creating a …\nTrait for types that can read <code>RecordBatch</code>’s.\nTrait for types that can write <code>RecordBatch</code>’s.\nWrite footer or termination data, then mark the writer as …\nGet a reference to a column’s array by index.\nGet a reference to a column’s array by name.\nGet a reference to all columns in the record batch.\nReturns the total number of bytes of memory occupied …\nReturn the schema, columns and row count of this …\nMatch field names of structs and lists. If set to <code>true</code>, …\nCreate a new RecordBatchIterator.\nCreates a new <code>RecordBatchOptions</code>\nCreates a new empty <code>RecordBatch</code>.\nCreates a <code>RecordBatch</code> from a schema and columns, without …\nNormalize a semi-structured <code>RecordBatch</code> into a flat table.\nReturns the number of columns in the record batch.\nReturns the number of rows in each column.\nProjects the schema onto the specified columns\nRemove column by index and return it.\nThe number of rows in this RecordBatch\nOptional row count, useful for specifying a row count for …\nReturns the schema of this <code>RecordBatchReader</code>.\nReturns the <code>Schema</code> of the record batch.\nMutable access to the metadata of the schema.\nReturns a reference to the <code>Schema</code> of the record batch.\nReturn a new RecordBatch where each column is sliced …\nCreate a <code>RecordBatch</code> from an iterable list of pairs of the …\nCreate a <code>RecordBatch</code> from an iterable list of tuples of the\nCreates a <code>RecordBatch</code> from a schema and columns.\nValidate the schema and columns using <code>RecordBatchOptions</code>. …\nCreates a <code>RecordBatch</code> from a schema and columns, with …\nSets the match_field_names of RecordBatchOptions and …\nSets the row_count of RecordBatchOptions and returns self\nOverride the schema of this <code>RecordBatch</code>\nWrite a single batch to the writer.\nThe <code>RunArrayIter</code> provides an idiomatic way to iterate over …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncreate a new iterator\nA possibly <code>Scalar</code> <code>Array</code>\nA wrapper around a single value <code>Array</code> that implements <code>Datum</code>…\nReturns the value for this <code>Datum</code> and a boolean indicating …\nReturns the inner array\nCreate a new <code>Scalar</code> from an <code>Array</code>\nNumber of microseconds in a second\nNumber of microseconds in a day\nNumber of milliseconds in a second\nNumber of milliseconds in a day\nNumber of nanoseconds in a second\nNumber of nanoseconds in a day\nNumber of seconds in a day\nConstant from chrono crate\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveDate</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveDateTime</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>DateTime&lt;Tz&gt;</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>Duration</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveTime</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>\nconverts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveDateTime</code>\nconverts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveDateTime</code>\nconverts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(ms)</code>\nconverts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(s)</code>\nconverts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(ns)</code>\nconverts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(us)</code>\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nSimilar to timestamp_s_to_datetime but only compute <code>date</code>\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nSimilar to timestamp_s_to_datetime but only compute <code>time</code>\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nconverts a <code>i64</code> representing a <code>duration(ms)</code> to …\nconverts a <code>i64</code> representing a <code>duration(s)</code> to …\nAn Arrow <code>TimeZone</code>\nAn <code>Offset</code> for <code>Tz</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a fixed offset of the form “+09:00”, “-09” …\nAn Arrow <code>TimeZone</code>\nAn <code>Offset</code> for <code>Tz</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates two <code>Buffer</code>s from an iterator of <code>Option</code>. The first …\nA subtype of primitive type that represents legal …\nTrait for primitive values.\nA subtype of primitive type that represents temporal …\nA timestamp type allows us to create array builders that …\nWidth of the type\nAn arrow binary array with i32 offsets\n<code>BinaryViewType</code> for string arrays\nA boolean datatype\nA trait over the variable-size byte array types\nA trait over the variable length bytes view array types\nthe corresponding Arrow data type of this primitive type.\nDatatype of array elements\nDatatype of array elements\nThe corresponding Arrow data type\nDefault values for <code>DataType</code>\n32-bit date type: the elapsed time since UNIX epoch in …\n64-bit date type: the elapsed time since UNIX epoch in …\nThe decimal type for a Decimal128Array\nThe decimal type for a Decimal256Array\nThe decimal type for a Decimal32Array\nThe decimal type for a Decimal64Array\nA trait over the decimal types, used by <code>PrimitiveArray</code> to …\nElapsed time type: microseconds.\nElapsed time type: milliseconds.\nElapsed time type: nanoseconds.\nElapsed time type: seconds.\n16-bit floating point number type.\n32-bit floating point number type.\n64-bit floating point number type.\n<code>ByteArrayType</code> for binary arrays\n<code>ByteArrayType</code> for string arrays\nIf element in array is utf8 encoded string.\nSigned 16-bit integer type.\nSigned 32-bit integer type.\nSigned 64-bit integer type.\nA signed 8-bit integer type.\nValue of an IntervalDayTime array\n“Calendar” interval type: days and milliseconds. See …\nValue of an IntervalMonthDayNano array\n“Calendar” interval type: months, days, and …\n32-bit “calendar” interval type: the number of whole …\nAn arrow binary array with i64 offsets\nAn arrow utf8 array with i64 offsets\nThe maximum value that can be represented\nThe maximum value that can be represented\nMaximum number of significant digits\nMaximum no of digits after the decimal point (note the …\nThe minimum value that can be represented\nThe minimum value that can be represented\nThe multiplicative inverse, i.e. <code>-1</code>.\nThe multiplicative inverse, i.e. <code>-1</code>.\nCorresponding Rust native type for the primitive type.\nType for representing its equivalent rust type i.e …\nType for representing its equivalent rust type i.e …\nThe multiplicative identity, i.e. <code>1</code>.\nThe multiplicative identity, i.e. <code>1</code>.\nType of offset i.e i32/i64\nType for owned corresponding to <code>Native</code>\n“Decimal32”, “Decimal64”, “Decimal128” or “…\n“Binary” or “String”, for use in error messages\n“Binary” or “String”, for use in displayed or …\nA subtype of primitive type that is used as run-ends index …\n<code>ByteViewType</code> for string arrays\nfn to create its <code>DataType</code>\n32-bit time type: the elapsed time since midnight in …\n32-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\nTimestamp microsecond type with an optional timezone.\nTimestamp millisecond type with an optional timezone.\nTimestamp nanosecond type with an optional timezone.\nTimestamp second type with an optional timezone.\nUnsigned 16-bit integer type.\nUnsigned 32-bit integer type.\nUnsigned 64-bit integer type.\nUnsigned 8-bit integer type.\nThe <code>TimeUnit</code> of this timestamp.\nAn arrow utf8 array with i32 offsets\nThe additive identity i.e. <code>0</code>.\nThe additive identity i.e. <code>0</code>.\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow Date32Type\nAdds the given IntervalDayTimeType to an arrow Date64Type\nAdds the given IntervalDayTimeType to an arrow Date64Type\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalYearMonthType to an arrow …\nAdds the given IntervalYearMonthType to an arrow …\nAdds the given IntervalYearMonthType to an arrow …\nAdds the given IntervalYearMonthType to an arrow …\nAdds the given IntervalYearMonthType to an arrow Date32Type\nAdds the given IntervalYearMonthType to an arrow Date64Type\nAdds the given IntervalYearMonthType to an arrow Date64Type\nCrate private types for Byte Arrays\nComputes the absolute value\nComputes the absolute value\nPerforms checked addition\nPerforms checked addition\nPerforms checked division\nPerforms checked division\nPerforms checked multiplication\nPerforms checked multiplication\nNegates the value\nNegates the value\nPerforms checked exponentiation\nPerforms checked exponentiation\nPerforms checked remainder\nPerforms checked remainder\nPerforms checked subtraction\nPerforms checked subtraction\nNumber of days\nNumber of days\nCrate private types for Decimal Arrays\nReturns a default value of this primitive type.\nFormats the decimal value with the provided precision and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a chrono::NaiveDate into an arrow Date32Type\nConverts a chrono::NaiveDate into an arrow Date64Type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether <code>value</code> contains no more than <code>precision</code> …\nCreates a ArrowTimestampType::Native from the provided …\nCreates a IntervalYearMonthType::Native\nCreates a IntervalDayTimeType::Native\nCreates a IntervalMonthDayNanoType::Native\nNumber of milliseconds\nNumber of months\nNumber of nanoseconds\nCreate a new <code>IntervalMonthDayNano</code>\nCreate a new <code>IntervalDayTime</code>\nSubtracts the given IntervalDayTimeType to an arrow …\nSubtracts the given IntervalDayTimeType to an arrow …\nSubtracts the given IntervalDayTimeType to an arrow …\nSubtracts the given IntervalDayTimeType to an arrow …\nSubtract the given IntervalDayTimeType to an arrow …\nSubtract the given IntervalDayTimeType to an arrow …\nSubtract the given IntervalDayTimeType to an arrow …\nSubtracts the given IntervalMonthDayNanoType to an arrow …\nSubtracts the given IntervalMonthDayNanoType to an arrow …\nSubtracts the given IntervalMonthDayNanoType to an arrow …\nSubtracts the given IntervalMonthDayNanoType to an arrow …\nSubtract the given IntervalMonthDayNanoType to an arrow …\nSubtract the given IntervalMonthDayNanoType to an arrow …\nSubtract the given IntervalMonthDayNanoType to an arrow …\nSubtracts the given IntervalYearMonthType to an arrow …\nSubtracts the given IntervalYearMonthType to an arrow …\nSubtracts the given IntervalYearMonthType to an arrow …\nSubtracts the given IntervalYearMonthType to an arrow …\nSubtract the given IntervalYearMonthType to an arrow …\nSubtract the given IntervalYearMonthType to an arrow …\nSubtract the given IntervalYearMonthType to an arrow …\nTurns a IntervalYearMonthType type into an i32 of months.\nConverts an arrow Date32Type into a chrono::NaiveDate\nConverts an arrow Date64Type into a chrono::NaiveDate\nConverts an arrow Date64Type into a chrono::NaiveDateTime …\nTurns a IntervalDayTimeType into a tuple of (days, …\nTurns a IntervalMonthDayNanoType into a tuple of (months, …\nVerifies that every consecutive pair of <code>offsets</code> denotes a …\nVerifies that the provided buffers are valid for this …\nValidates that <code>value</code> contains no more than <code>precision</code> …\nValidate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>\nComputes the absolute value\nComputes the absolute value\nPerforms wrapping addition\nPerforms wrapping addition\nPerforms wrapping division\nPerforms wrapping division\nPerforms wrapping multiplication\nPerforms wrapping multiplication\nNegates the value\nNegates the value\nPerforms wrapping exponentiation\nPerforms wrapping exponentiation\nPerforms wrapping remainder\nPerforms wrapping remainder\nPerforms wrapping subtraction\nPerforms wrapping subtraction\nSafety")