searchState.loadedDescShard("arrow_arith", 0, "Arrow arithmetic and aggregation kernels\nDefines aggregations over Arrow arrays.\nKernels for operating on <code>PrimitiveArray</code>s\nModule contains bitwise operations on arrays\nDefines boolean kernels on Arrow <code>BooleanArray</code>’s, e.g. <code>AND</code>…\nDefines numeric arithmetic kernels on <code>PrimitiveArray</code>, such …\nDefines temporal kernels for time and date related …\nAn accumulator for primitive numeric values.\nThe preferred vector size in bytes for the target platform.\nnon-nullable aggregation requires fewer temporary …\nAccumulate a non-null value.\nAccumulate a nullable values. If <code>valid</code> is false the <code>value</code> …\nGeneric aggregation for any primitive type. Returns None …\nReturns the bitwise and of all non-null input values.\nReturns the bitwise or of all non-null input values.\nReturns the bitwise xor of all non-null input values.\nReturns true if all non-null input values are true, …\nReturns true if any non-null input value is true, …\nReturn the aggregated value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the maximum value in the array, according to the …\nReturns the max of values in the array of <code>ArrowNumericType</code> …\nReturns the maximum value in the binary array, according …\nReturns the maximum value in the binary view array, …\nReturns the maximum value in the boolean array\nReturns the maximum value in the fixed size binary array, …\nReturns the maximum value in the string array, according …\nReturns the maximum value in the string view array, …\nMerge another accumulator into this accumulator\nReturns the minimum value in the array, according to the …\nReturns the min of values in the array of <code>ArrowNumericType</code> …\nReturns the minimum value in the binary array, according …\nReturns the minimum value in the binary view array, …\nReturns the minimum value in the boolean array.\nReturns the minimum value in the fixed size binary array, …\nHelper to compute min/max of <code>ArrayAccessor</code>.\nHelper to compute min/max of <code>GenericByteViewArray&lt;T&gt;</code>. The …\nReturns the minimum value in the string array, according …\nReturns the minimum value in the string view array, …\nHelper for branchlessly selecting either <code>a</code> or <code>b</code> based on …\nReturns the sum of values in the primitive array.\nReturns the sum of values in the array.\nReturns the sum of values in the array.\nReturns the sum of values in the primitive array.\nAllies a binary infallable function to two <code>PrimitiveArray</code>s,\nApplies a binary and infallible function to values in two …\nComputes the union of the nulls in two optional <code>NullBuffer</code> …\nApplies the provided fallible binary operation across <code>a</code> …\nApplies the provided fallible binary operation across <code>a</code> …\nThis intentional inline(never) attribute helps LLVM …\nThis intentional inline(never) attribute helps LLVM …\nSee <code>PrimitiveArray::try_unary</code>\nSee <code>PrimitiveArray::try_unary_mut</code>\nSee <code>PrimitiveArray::unary</code>\nSee <code>PrimitiveArray::unary_mut</code>\nPerform <code>left &amp; right</code> operation on two arrays. If either …\nPerform <code>left &amp; !right</code> operation on two arrays. If either …\nPerform bitwise <code>and</code> every value in an array with the …\nPerform <code>!array</code> operation on array. If array value is null …\nThe helper function for bitwise operation with two array\nPerform <code>left | right</code> operation on two arrays. If either …\nPerform bitwise <code>or</code> every value in an array with the …\nPerform bitwise <code>left &lt;&lt; right</code> operation on two arrays. If …\nPerform bitwise <code>left &lt;&lt; right</code> every value in an array with …\nPerform bitwise <code>left &gt;&gt; right</code> operation on two arrays. If …\nPerform bitwise <code>left &gt;&gt; right</code> every value in an array with …\nPerform <code>left ^ right</code> operation on two arrays. If either …\nPerform bitwise <code>xor</code> every value in an array with the …\nPerforms <code>AND</code> operation on two arrays. If either left or …\nLogical ‘and’ boolean values with Kleene logic\nPerforms <code>AND_NOT</code> operation on two arrays. If either left …\nHelper function to implement binary kernels\nReturns a non-null BooleanArray with whether each value of …\nReturns a non-null BooleanArray with whether each value of …\nPerforms unary <code>NOT</code> operation on an arrays. If value is …\nPerforms <code>OR</code> operation on two arrays. If either left or …\nLogical ‘or’ boolean values with Kleene logic\nArithmetic trait for date arrays\nArithmetic trait for interval arrays\nAn enumeration of arithmetic operations\nArithmetic trait for timestamp arrays\nPerform <code>lhs + rhs</code>, returning an error on overflow\nPerform <code>lhs + rhs</code>, wrapping on overflow for …\nDispatch the given <code>op</code> to the appropriate specialized kernel\nPerform arithmetic operation on a date array\nPerform arithmetic operation on decimal arrays\nPerform <code>lhs / rhs</code>\nPerform an arithmetic operation on floats\nReturns the argument unchanged.\nPerform an arithmetic operation on integers\nPerform arithmetic operation on an interval array\nCalls <code>U::from(self)</code>.\nPerform <code>lhs * rhs</code>, returning an error on overflow\nPerform <code>lhs * rhs</code>, wrapping on overflow for …\nNegates each element of  <code>array</code>, returning an error on …\nNegates each element of  <code>array</code>, wrapping on overflow for …\nPerform an infallible binary operation on potentially …\nSame as <code>op</code> but with a type hint for the returned array\nPerform <code>lhs % rhs</code>\nPerform <code>lhs - rhs</code>, returning an error on overflow\nPerform <code>lhs - rhs</code>, wrapping on overflow for …\nPerform arithmetic operation on a timestamp array\nPerform a fallible binary operation on potentially scalar …\nSame as <code>try_op</code> but with a type hint for the returned array\nValid parts to extract from date/time/timestamp arrays.\nDay of the month, in range <code>1..=31</code>\nDay of the week, in range <code>0..=6</code>, where Monday is <code>0</code>\nDay of the week, in range <code>0..=6</code>, where Sunday is <code>0</code>\nDay of year, in range <code>1..=366</code>\nImplement the specialized functions for extracting date …\nHour of the day, in range <code>0..=23</code>\nMicrosecond of the second\nMillisecond of the second\nMinute of the hour, in range <code>0..=59</code>\nMonth in the year, in range <code>1..=12</code>\nNanosecond of the second\nQuarter of the year, in range <code>1..=4</code>\nSecond of the minute, in range <code>0..=59</code>\nweek of the year, in range <code>1..=53</code>, computed as per ISO 8601\nISO week of the year, in range <code>1..=53</code>\nCalendar year\nISO year, computed as per ISO 8601\nGiven an array, return a new array with the extracted …\nReturns the argument unchanged.\nReturns function to extract relevant <code>DatePart</code> from types …\nExtract optional <code>Tz</code> from timestamp data types, returning …\nCalls <code>U::from(self)</code>.\nReturns the day of week; Monday is encoded as <code>0</code>, Tuesday …\nReturns the day of week; Sunday is encoded as <code>0</code>, Monday as …")