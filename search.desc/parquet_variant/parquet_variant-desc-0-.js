searchState.loadedDescShard("parquet_variant", 0, "Implementation of Variant Binary Encoding from Apache …\nPrimitive (type_id=1): BINARY\nPrimitive (type_id=1): BOOLEAN (false)\nPrimitive (type_id=1): BOOLEAN (true)\nPrimitive (type_id=1): DATE\nPrimitive (type_id=1): DECIMAL(precision, scale) 128-bits\nPrimitive (type_id=1): DECIMAL(precision, scale) 32-bits\nPrimitive (type_id=1): DECIMAL(precision, scale) 64-bits\nPrimitive (type_id=1): DOUBLE\nAccess field with name <code>name</code>\nPrimitive (type_id=1): FLOAT\nAccess the list element at <code>index</code>\nPrimitive (type_id=1): INT(16, SIGNED)\nPrimitive (type_id=1): INT(32, SIGNED)\nPrimitive (type_id=1): INT(64, SIGNED)\nPrimitive (type_id=1): INT(8, SIGNED)\nArray (type_id=4): N/A\nA builder for creating <code>Variant::List</code> values.\nPrimitive type: Null\nObject (type_id=3): N/A\nA builder for creating <code>Variant::Object</code> values.\nA Variant <code>ShortString</code>\nShort String (type_id=2): STRING\nPrimitive (type_id=1): STRING\nPrimitive (type_id=1): TIMESTAMP(isAdjustedToUTC=true, …\nPrimitive (type_id=1): TIMESTAMP(isAdjustedToUTC=false, …\nRepresents a Parquet Variant\nTop level builder for <code>Variant</code> values\nExtends <code>VariantBuilder</code> to help building nested <code>Variant</code>s\nRepresents an 16-byte decimal value in the Variant format.\nRepresents a 4-byte decimal value in the Variant format.\nRepresents an 8-byte decimal value in the Variant format.\n<code>Variant</code> Array.\n<code>Variant</code> Metadata\nA <code>Variant</code> Object (struct with named fields).\nRepresents a qualified path to a potential subfield or …\nElement of a <code>VariantPath</code> that can be a field name or an …\nSet of duplicate fields to report for errors\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the list has been finished, the written content of …\nWhether the object has been finished, the written content …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe starting offset in the parent’s metadata buffer …\nThe starting offset in the parent’s metadata buffer …\nThe starting offset in the parent’s buffer where this …\nThe starting offset in the parent’s buffer where this …\nA builder for creating <code>Variant::List</code> values.\nBuilder for constructing metadata for <code>Variant</code> values.\nA builder for creating <code>Variant::Object</code> values.\nTracks information needed to correctly finalize a nested …\nWrapper around a <code>Vec&lt;u8&gt;</code> that provides methods for …\nTop level builder for <code>Variant</code> values\nExtends <code>VariantBuilder</code> to help building nested <code>Variant</code>s\nAdds a single field name to the field name directory in …\nWrites out the header byte for a variant object or list, …\nWrites out the offsets for an array of offsets, including …\nAppend <code>value_size</code> bytes of given <code>value</code> into <code>dest</code>.\nAppends a variant to the list.\nAppend a value to the builder.\nAppends a variant to the buffer.\nReturn mutable references to the buffer and metadata …\nSet of duplicate fields to report for errors\nFinalizes this list and appends it to its parent, which …\nFinalizes this object and appends it to its parent, which …\nFinish the builder and return the metadata and value …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the list has been finished, the written content of …\nWhether the object has been finished, the written content …\nAdd a field with key and value to the object\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner metadata buffers and value buffer.\nOutput buffer. Metadata is written to the end of this …\nConstruct a ValueBuffer that will write to a new …\nCreate a new VariantBuilder with new underlying buffer\nReturns a list builder that can be used to append a new …\nReturns a list builder that can be used to append a new …\nCreate an <code>ListBuilder</code> for creating <code>Variant::List</code> values.\nReturns an object builder that can be used to append a new …\nReturns an object builder that can be used to append a new …\nCreate an <code>ObjectBuilder</code> for creating <code>Variant::Object</code> …\nCreate a new VariantBuilder that will write the metadata …\nReturns the number of field names stored in the metadata …\nThe starting offset in the parent’s metadata buffer …\nThe starting offset in the parent’s metadata buffer …\nThe starting offset in the parent’s buffer where this …\nThe starting offset in the parent’s buffer where this …\nThis method reserves capacity for field names in the …\nReturn the inner buffer, without finalizing any in …\nAppends a new primitive value to this list\nAppend a value to the builder.\nAppends a variant to the buffer\nAdd a field with key and value to the object\nBuilder style API for adding a field with key and value to …\nBuilder-style API for appending a value to the list and …\nUpsert field name to dictionary, return its ID\nBuilder style API for adding a field with key and value to …\nThis method pre-populates the field name directory in the …\nCreate a new VariantBuilder with pre-existing …\nEnables unique field key validation for objects created …\nEnables validation for unique field keys when inserting …\nEnables validation of unique field keys in nested objects.\nBuilder-style API for appending a value to the list and …\nWrite little-endian integer to buffer\nWrite little-endian integer to buffer at a specific …\nUsed to unpack offset array entries such as metadata …\nThe basic type of a <code>Variant</code> value, encoded in the first …\nThe type of <code>VariantBasicType::Primitive</code>, for a primitive …\nDecodes a Binary from the value section of a variant.\nDecodes a Date from the value section of a variant.\nDecodes a Decimal16 from the value section of a variant.\nDecodes a Decimal4 from the value section of a variant.\nDecodes a Decimal8 from the value section of a variant.\nDecodes a Double from the value section of a variant.\nDecodes a Float from the value section of a variant.\nDecodes an Int16 from the value section of a variant.\nDecodes an Int32 from the value section of a variant.\nDecodes an Int64 from the value section of a variant.\nDecodes an Int8 from the value section of a variant.\nDecodes a long string from the value section of a variant.\nDecodes a short string from the value section of a variant.\nDecodes a TimestampMicros from the value section of a …\nDecodes a TimestampNtzMicros from the value section of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracts the basic type from a header byte\nExtract the primitive type from a Variant value-metadata …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a byte buffer to offset values based on the …\nBuild from the <code>offset_size_minus_one</code> bits (see spec).\nReturn one unsigned little-endian value from <code>bytes</code>.\nReturn one unsigned little-endian value from <code>bytes</code>.\nAccess field with name <code>name</code>\nAccess the list element at <code>index</code>\nRepresents a qualified path to a potential subfield or …\nElement of a <code>VariantPath</code> that can be a field name or an …\nReturn a new <code>VariantPath</code> with element appended\nCreate a new <code>VariantPath</code> from a vector of …\nReturn the inner path elements.\nAppend a new element to the path\nVerifies the expected size of type T, for a type that …\nHelper for reporting integer overflow errors in a …\nHelper to safely slice bytes with offset calculations.\nHelper to get a &amp;str from a slice at the given offset and …\nPerforms a binary search over a range using a fallible key …\nPrimitive (type_id=1): BINARY\nPrimitive (type_id=1): BOOLEAN (false)\nPrimitive (type_id=1): BOOLEAN (true)\nPrimitive (type_id=1): DATE\nPrimitive (type_id=1): DECIMAL(precision, scale) 128-bits\nPrimitive (type_id=1): DECIMAL(precision, scale) 32-bits\nPrimitive (type_id=1): DECIMAL(precision, scale) 64-bits\nPrimitive (type_id=1): DOUBLE\nPrimitive (type_id=1): FLOAT\nPrimitive (type_id=1): INT(16, SIGNED)\nPrimitive (type_id=1): INT(32, SIGNED)\nPrimitive (type_id=1): INT(64, SIGNED)\nPrimitive (type_id=1): INT(8, SIGNED)\nArray (type_id=4): N/A\nPrimitive type: Null\nObject (type_id=3): N/A\nA Variant <code>ShortString</code>\nShort String (type_id=2): STRING\nPrimitive (type_id=1): STRING\nPrimitive (type_id=1): TIMESTAMP(isAdjustedToUTC=true, …\nPrimitive (type_id=1): TIMESTAMP(isAdjustedToUTC=false, …\nRepresents a Parquet Variant\nConverts this variant to a <code>bool</code> if possible.\nConverts this variant to a <code>DateTime&lt;Utc&gt;</code> if possible.\nConverts this variant to tuple with a 16-byte unscaled …\nConverts this variant to tuple with a 4-byte unscaled …\nConverts this variant to tuple with an 8-byte unscaled …\nConverts this variant to an <code>f32</code> if possible.\nConverts this variant to an <code>f64</code> if possible.\nConverts this variant to an <code>i16</code> if possible.\nConverts this variant to an <code>i32</code> if possible.\nConverts this variant to an <code>i64</code> if possible.\nConverts this variant to an <code>i8</code> if possible.\nConverts this variant to a <code>List</code> if it is a <code>VariantList</code>.\nConverts this variant to a <code>NaiveDate</code> if possible.\nConverts this variant to a <code>NaiveDateTime</code> if possible.\nConverts this variant to <code>()</code> if it is null.\nConverts this variant to an <code>Object</code> if it is an …\nReturns the underlying Variant short string as a &amp;str\nConverts this variant to a <code>&amp;str</code> if possible.\nConverts this variant to a <code>&amp;[u8]</code> if possible.\nIf this is a list and the requested index is in bounds, …\nIf this is an object and the requested field name exists, …\nReturn a new Variant with the path followed.\nTrue if this variant instance has already been validated.\nReturn the metadata associated with this variant, if any.\nAttempts to interpret a metadata and value buffer pair as …\nSimilar to <code>Self::try_new_with_metadata</code>, but unvalidated.\nAttempts to interpret <code>value</code> as a variant short string …\nAttempts to interpret a metadata and value buffer pair as …\nCreate a new variant with existing metadata.\nRecursively validates this variant value, ensuring that …\nRepresents an 16-byte decimal value in the Variant format.\nRepresents a 4-byte decimal value in the Variant format.\nRepresents an 8-byte decimal value in the Variant format.\nReturns the underlying value of the decimal.\nReturns the underlying value of the decimal.\nReturns the underlying value of the decimal.\nReturns the scale of the decimal (how many digits after …\nReturns the scale of the decimal (how many digits after …\nReturns the scale of the decimal (how many digits after …\n<code>Variant</code> Array.\nA parsed version of the variant array value header byte.\nReturns the argument unchanged.\nReturns element by index in <code>0..self.len()</code>, if any. May …\nCalls <code>U::from(self)</code>.\nIs the array of zero length\nTrue if this instance is fully validated for panic-free …\nIterates over the values of this list. When working with …\nFallible iteration over the elements of this list.\nReturn the length of this array\nFallible version of <code>get</code>. Returns element by index, …\nAttempts to interpret <code>value</code> as a variant array value.\nAttempts to interpet <code>metadata</code> and <code>value</code> as a variant …\nPerforms a full validation of this variant array and …\n<code>Variant</code> Metadata\nHeader structure for <code>VariantMetadata</code>\nReturns the argument unchanged.\nAttempts to retrieve a dictionary entry by index, failing …\nGets an offset array entry by index.\nCalls <code>U::from(self)</code>.\nTrue if this metadata dictionary contains no entries\nTrue if this instance is fully validated for panic-free …\nWhether the dictionary keys are sorted and unique\nIterates over all dictionary entries. When working with …\nReturns an iterator that attempts to visit all dictionary …\nThe number of metadata dictionary entries\nInterprets <code>bytes</code> as a variant metadata instance, without …\nNote: This is <code>offset_size_minus_one</code> + 1\nTries to construct the variant metadata header, which has …\nAttempts to interpret <code>bytes</code> as a variant metadata …\nThe variant protocol version\nPerforms a full validation of this metadata dictionary and …\nA <code>Variant</code> Object (struct with named fields).\nHeader structure for <code>VariantObject</code>\nGet a field’s value by index in <code>0..self.len()</code>\nGet a field’s name by index in <code>0..self.len()</code>\nReturns the argument unchanged.\nReturns the value of the field with the specified name, if …\nCalls <code>U::from(self)</code>.\nReturns true if the object contains no key-value pairs\nTrue if this instance is fully validated for panic-free …\nReturns an iterator of (name, value) pairs over the fields …\nFallible iteration over the fields of this object.\nReturns the number of key-value pairs in this object\nFallible version of <code>field</code>. Returns field value by index, …\nFallible version of <code>field_name</code>. Returns field name by …\nAttempts to interpet <code>metadata</code> and <code>value</code> as a variant …\nAttempts to interpet <code>metadata</code> and <code>value</code> as a variant …\nPerforms a full validation of this variant object.")