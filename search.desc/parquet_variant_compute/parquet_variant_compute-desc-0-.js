searchState.loadedDescShard("parquet_variant_compute", 0, "<code>VariantArray</code> and compute kernels for the Variant Binary …\nPartially shredded:\nRepresents the shredding state of a <code>VariantArray</code>\nThis variant has a typed_value field and no value field …\nThis variant has no typed_value field\nAn array of Parquet <code>Variant</code> values\nA builder for <code>VariantArray</code>\nA <code>VariantBuilderExt</code> that writes directly to the buffers of …\nParent array builder that this variant builder writes to. …\nParse a batch of JSON strings into a batch of Variants …\nTransform a batch of Variant represented as STRUCT&lt;…\nIf the builder was not finished, roll back any changes …\nThe fields of the final <code>StructArray</code>\nwas finish called?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nModule for transforming a batch of JSON strings into a …\nReference to the underlying StructArray\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nbuffer for all the metadata\n(offset, len) pairs for locations of metadata in the buffer\nstarting offset in the variant_builder’s <code>metadata</code> buffer\nNulls\nhow is this variant array shredded?\nModule for transforming a batch of Variants represented as …\nbuffer for values\n(offset, len) pairs for locations of values in the buffer\nstarting offset in the variant_builder’s <code>value</code> buffer\n<code>VariantArray</code> implementation\n<code>VariantArrayBuilder</code> implementation\nBuilder for the in progress variant value, temporarily …\nCasts a typed arrow <code>Array</code> to a <code>VariantArray</code>. This is …\nConvert a decimal value to a <code>VariantDecimal</code>\nConvert the input array to a <code>VariantArray</code> row by row, …\nConvert the input array to a <code>VariantArray</code> row by row, …\nConvert the input array of a specific primitive type to a …\nParse a batch of JSON strings into a batch of Variants …\nTransform a batch of Variant represented as STRUCT&lt;…\nPartially shredded:\nRepresents the shredding state of a <code>VariantArray</code>\nThis variant has a typed_value field and no value field …\nThis variant has no typed_value field\nAn array of Parquet <code>Variant</code> values\nReturns a reference to the underlying <code>StructArray</code>.\nReference to the underlying StructArray\nReturns the inner <code>StructArray</code>, consuming self\nReturn a reference to the metadata field of the <code>StructArray</code>\nReturn a reference to the metadata field\nReturn the shredding state of this <code>VariantArray</code>\nhow is this variant array shredded?\nSlice all the underlying arrays\nCreates a new <code>VariantArray</code> from a <code>StructArray</code>.\ntry to create a new <code>ShreddingState</code> from the given fields\nReturn a reference to the typed_value field of the …\nReturn a reference to the typed_value field, if present\nreturns the non-null element at index as a Variant\nReturn the <code>Variant</code> instance stored at the given row\nReturn a reference to the value field of the <code>StructArray</code>\nReturn a reference to the value field, if present\nA builder for <code>VariantArray</code>\nA <code>VariantBuilderExt</code> that writes directly to the buffers of …\nAppends a null row to the builder.\nAppend the <code>Variant</code> to the builder as the next row\nParent array builder that this variant builder writes to. …\nBuild the final builder\nThe fields of the final <code>StructArray</code>\nCalled to finish the in progress variant and write it to …\nwas finish called?\nReturn a reference to the underlying <code>VariantBuilder</code>\nReturn a mutable reference to the underlying <code>VariantBuilder</code>\nbuffer for all the metadata\n(offset, len) pairs for locations of metadata in the buffer\nstarting offset in the variant_builder’s <code>metadata</code> buffer\nConstructs a new VariantArrayVariantBuilder\nNulls\nbuffer for values\n(offset, len) pairs for locations of values in the buffer\nstarting offset in the variant_builder’s <code>value</code> buffer\nReturn a <code>VariantArrayVariantBuilder</code> that writes directly …\nBuilder for the in progress variant value, temporarily …\nControls the action of the variant_get kernel.\nif <code>as_type</code> is None, the returned array will itself be a …\nControls the casting behavior (e.g. error vs substituting …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct default options to get the specified path as a …\nConstruct options to get the specified path as a variant.\nWhat path to extract\nReturns an array with the specified path extracted from …\nSpecify the type to return.\nSpecify the cast options to use when casting to the …\nThis trait represents something that gets the output of …\ncreate output for a shredded variant array\noutput for a perfectly shredded variant array\nwrite out an unshredded variant array\nTrait for Arrow primitive types that can be used in the …\nOutputs Primitive arrays\nPhantom data for the primitive type\nReturned output type\nControls the casting behavior (e.g. error vs substituting …\nReturns the argument unchanged.\nTry to extract the primitive value from a Variant, …\nCalls <code>U::from(self)</code>.\nWhat path to extract\nOutputs VariantArrays\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhat path to extract")